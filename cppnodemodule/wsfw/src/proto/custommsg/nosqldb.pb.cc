// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nosqldb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nosqldb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xkcrm {

namespace {

const ::google::protobuf::Descriptor* db_res_users_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_res_users_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_res_company_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_res_company_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_res_partner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_res_partner_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crm_lead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crm_lead_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_crm_phonecall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_crm_phonecall_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nosqldb_2eproto() {
  protobuf_AddDesc_nosqldb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nosqldb.proto");
  GOOGLE_CHECK(file != NULL);
  db_res_users_descriptor_ = file->message_type(0);
  static const int db_res_users_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, uuiduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, uuidcompanyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, emailaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, hashedpassword_),
  };
  db_res_users_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      db_res_users_descriptor_,
      db_res_users::default_instance_,
      db_res_users_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, _has_bits_[0]),
      -1,
      -1,
      sizeof(db_res_users),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_users, _internal_metadata_),
      -1);
  db_res_company_descriptor_ = file->message_type(1);
  static const int db_res_company_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, uuidcompanyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, companyname_),
  };
  db_res_company_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      db_res_company_descriptor_,
      db_res_company::default_instance_,
      db_res_company_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, _has_bits_[0]),
      -1,
      -1,
      sizeof(db_res_company),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_company, _internal_metadata_),
      -1);
  db_res_partner_descriptor_ = file->message_type(2);
  static const int db_res_partner_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, uuidpartner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, partnername_),
  };
  db_res_partner_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      db_res_partner_descriptor_,
      db_res_partner::default_instance_,
      db_res_partner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, _has_bits_[0]),
      -1,
      -1,
      sizeof(db_res_partner),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_res_partner, _internal_metadata_),
      -1);
  db_crm_lead_descriptor_ = file->message_type(3);
  static const int db_crm_lead_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, uuidleadid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, uuiduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, uuidcompanyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, leadname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, partnername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, street_),
  };
  db_crm_lead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      db_crm_lead_descriptor_,
      db_crm_lead::default_instance_,
      db_crm_lead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, _has_bits_[0]),
      -1,
      -1,
      sizeof(db_crm_lead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_lead, _internal_metadata_),
      -1);
  db_crm_phonecall_descriptor_ = file->message_type(4);
  static const int db_crm_phonecall_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, uuidphonecallid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, uuiduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, uuidpartner_),
  };
  db_crm_phonecall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      db_crm_phonecall_descriptor_,
      db_crm_phonecall::default_instance_,
      db_crm_phonecall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, _has_bits_[0]),
      -1,
      -1,
      sizeof(db_crm_phonecall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_crm_phonecall, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nosqldb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      db_res_users_descriptor_, &db_res_users::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      db_res_company_descriptor_, &db_res_company::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      db_res_partner_descriptor_, &db_res_partner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      db_crm_lead_descriptor_, &db_crm_lead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      db_crm_phonecall_descriptor_, &db_crm_phonecall::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nosqldb_2eproto() {
  delete db_res_users::default_instance_;
  delete db_res_users_reflection_;
  delete db_res_users::_default_type_;
  delete db_res_company::default_instance_;
  delete db_res_company_reflection_;
  delete db_res_company::_default_type_;
  delete db_res_partner::default_instance_;
  delete db_res_partner_reflection_;
  delete db_res_partner::_default_type_;
  delete db_crm_lead::default_instance_;
  delete db_crm_lead_reflection_;
  delete db_crm_lead::_default_type_;
  delete db_crm_phonecall::default_instance_;
  delete db_crm_phonecall_reflection_;
  delete db_crm_phonecall::_default_type_;
}

void protobuf_AddDesc_nosqldb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnosqldb.proto\022\005xkcrm\"\267\001\n\014db_res_users\022"
    "\022\n\nuuiduserid\030\001 \002(\t\022\026\n\004type\030\002 \002(\t:\010res_u"
    "ser\022\017\n\007channel\030\003 \003(\t\022\025\n\ruuidcompanyid\030\004 "
    "\001(\t\022\020\n\010realname\030\013 \001(\t\022\023\n\013phonenumber\030\014 \001"
    "(\t\022\024\n\014emailaddress\030\r \001(\t\022\026\n\016hashedpasswo"
    "rd\030\016 \001(\t\"h\n\016db_res_company\022\025\n\ruuidcompan"
    "yid\030\001 \002(\t\022\031\n\004type\030\002 \002(\t:\013res_company\022\017\n\007"
    "channel\030\003 \003(\t\022\023\n\013companyname\030\013 \001(\t\"f\n\016db"
    "_res_partner\022\023\n\013uuidpartner\030\001 \002(\t\022\031\n\004typ"
    "e\030\002 \002(\t:\013res_partner\022\017\n\007channel\030\003 \003(\t\022\023\n"
    "\013partnername\030\013 \001(\t\"\300\001\n\013db_crm_lead\022\022\n\nuu"
    "idleadid\030\001 \002(\t\022\026\n\004type\030\002 \002(\t:\010crm_lead\022\017"
    "\n\007channel\030\003 \003(\t\022\022\n\nuuiduserid\030\004 \002(\t\022\025\n\ru"
    "uidcompanyid\030\005 \001(\t\022\020\n\010leadname\030\n \001(\t\022\022\n\n"
    "createdate\030\013 \001(\t\022\023\n\013partnername\030\014 \001(\t\022\016\n"
    "\006street\030\021 \001(\t\"\202\001\n\020db_crm_phonecall\022\027\n\017uu"
    "idphonecallid\030\001 \002(\t\022\033\n\004type\030\002 \002(\t:\rcrm_p"
    "honecall\022\017\n\007channel\030\003 \003(\t\022\022\n\nuuiduserid\030"
    "\004 \002(\t\022\023\n\013uuidpartner\030\005 \001(\t", 746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nosqldb.proto", &protobuf_RegisterTypes);
  db_res_users::_default_type_ =
      new ::std::string("res_user", 8);
  db_res_users::default_instance_ = new db_res_users();
  db_res_company::_default_type_ =
      new ::std::string("res_company", 11);
  db_res_company::default_instance_ = new db_res_company();
  db_res_partner::_default_type_ =
      new ::std::string("res_partner", 11);
  db_res_partner::default_instance_ = new db_res_partner();
  db_crm_lead::_default_type_ =
      new ::std::string("crm_lead", 8);
  db_crm_lead::default_instance_ = new db_crm_lead();
  db_crm_phonecall::_default_type_ =
      new ::std::string("crm_phonecall", 13);
  db_crm_phonecall::default_instance_ = new db_crm_phonecall();
  db_res_users::default_instance_->InitAsDefaultInstance();
  db_res_company::default_instance_->InitAsDefaultInstance();
  db_res_partner::default_instance_->InitAsDefaultInstance();
  db_crm_lead::default_instance_->InitAsDefaultInstance();
  db_crm_phonecall::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nosqldb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nosqldb_2eproto {
  StaticDescriptorInitializer_nosqldb_2eproto() {
    protobuf_AddDesc_nosqldb_2eproto();
  }
} static_descriptor_initializer_nosqldb_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

::std::string* db_res_users::_default_type_ = NULL;
#ifndef _MSC_VER
const int db_res_users::kUuiduseridFieldNumber;
const int db_res_users::kTypeFieldNumber;
const int db_res_users::kChannelFieldNumber;
const int db_res_users::kUuidcompanyidFieldNumber;
const int db_res_users::kRealnameFieldNumber;
const int db_res_users::kPhonenumberFieldNumber;
const int db_res_users::kEmailaddressFieldNumber;
const int db_res_users::kHashedpasswordFieldNumber;
#endif  // !_MSC_VER

db_res_users::db_res_users()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xkcrm.db_res_users)
}

void db_res_users::InitAsDefaultInstance() {
}

db_res_users::db_res_users(const db_res_users& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xkcrm.db_res_users)
}

void db_res_users::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuiduserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  uuidcompanyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emailaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashedpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_res_users::~db_res_users() {
  // @@protoc_insertion_point(destructor:xkcrm.db_res_users)
  SharedDtor();
}

void db_res_users::SharedDtor() {
  uuiduserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  uuidcompanyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emailaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashedpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void db_res_users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_res_users::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_res_users_descriptor_;
}

const db_res_users& db_res_users::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nosqldb_2eproto();
  return *default_instance_;
}

db_res_users* db_res_users::default_instance_ = NULL;

db_res_users* db_res_users::New(::google::protobuf::Arena* arena) const {
  db_res_users* n = new db_res_users;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void db_res_users::Clear() {
  if (_has_bits_[0 / 32] & 251) {
    if (has_uuiduserid()) {
      uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    if (has_uuidcompanyid()) {
      uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_realname()) {
      realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_phonenumber()) {
      phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_emailaddress()) {
      emailaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hashedpassword()) {
      hashedpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool db_res_users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xkcrm.db_res_users)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuiduserid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuiduserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuiduserid().data(), this->uuiduserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.uuiduserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "res_user"];
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // repeated string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        if (input->ExpectTag(34)) goto parse_uuidcompanyid;
        break;
      }

      // optional string uuidcompanyid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuidcompanyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidcompanyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidcompanyid().data(), this->uuidcompanyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.uuidcompanyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_realname;
        break;
      }

      // optional string realname = 11;
      case 11: {
        if (tag == 90) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.realname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_phonenumber;
        break;
      }

      // optional string phonenumber = 12;
      case 12: {
        if (tag == 98) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_emailaddress;
        break;
      }

      // optional string emailaddress = 13;
      case 13: {
        if (tag == 106) {
         parse_emailaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emailaddress().data(), this->emailaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.emailaddress");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_hashedpassword;
        break;
      }

      // optional string hashedpassword = 14;
      case 14: {
        if (tag == 114) {
         parse_hashedpassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashedpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hashedpassword().data(), this->hashedpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_users.hashedpassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xkcrm.db_res_users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xkcrm.db_res_users)
  return false;
#undef DO_
}

void db_res_users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xkcrm.db_res_users)
  // required string uuiduserid = 1;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.uuiduserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuiduserid(), output);
  }

  // required string type = 2 [default = "res_user"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "xkcrm.db_res_users.channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(i), output);
  }

  // optional string uuidcompanyid = 4;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.uuidcompanyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuidcompanyid(), output);
  }

  // optional string realname = 11;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.realname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->realname(), output);
  }

  // optional string phonenumber = 12;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->phonenumber(), output);
  }

  // optional string emailaddress = 13;
  if (has_emailaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emailaddress().data(), this->emailaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.emailaddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->emailaddress(), output);
  }

  // optional string hashedpassword = 14;
  if (has_hashedpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashedpassword().data(), this->hashedpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.hashedpassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->hashedpassword(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xkcrm.db_res_users)
}

::google::protobuf::uint8* db_res_users::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xkcrm.db_res_users)
  // required string uuiduserid = 1;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.uuiduserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuiduserid(), target);
  }

  // required string type = 2 [default = "res_user"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channel(i), target);
  }

  // optional string uuidcompanyid = 4;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.uuidcompanyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuidcompanyid(), target);
  }

  // optional string realname = 11;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.realname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->realname(), target);
  }

  // optional string phonenumber = 12;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->phonenumber(), target);
  }

  // optional string emailaddress = 13;
  if (has_emailaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emailaddress().data(), this->emailaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.emailaddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->emailaddress(), target);
  }

  // optional string hashedpassword = 14;
  if (has_hashedpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashedpassword().data(), this->hashedpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_users.hashedpassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->hashedpassword(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xkcrm.db_res_users)
  return target;
}

int db_res_users::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuiduserid()) {
    // required string uuiduserid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());
  }

  if (has_type()) {
    // required string type = 2 [default = "res_user"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int db_res_users::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uuiduserid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());

    // required string type = 2 [default = "res_user"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248) {
    // optional string uuidcompanyid = 4;
    if (has_uuidcompanyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuidcompanyid());
    }

    // optional string realname = 11;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }

    // optional string phonenumber = 12;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string emailaddress = 13;
    if (has_emailaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emailaddress());
    }

    // optional string hashedpassword = 14;
    if (has_hashedpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hashedpassword());
    }

  }
  // repeated string channel = 3;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_res_users::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const db_res_users* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_res_users*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_res_users::MergeFrom(const db_res_users& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuiduserid()) {
      set_has_uuiduserid();
      uuiduserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuiduserid_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_uuidcompanyid()) {
      set_has_uuidcompanyid();
      uuidcompanyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidcompanyid_);
    }
    if (from.has_realname()) {
      set_has_realname();
      realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
    }
    if (from.has_phonenumber()) {
      set_has_phonenumber();
      phonenumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phonenumber_);
    }
    if (from.has_emailaddress()) {
      set_has_emailaddress();
      emailaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emailaddress_);
    }
    if (from.has_hashedpassword()) {
      set_has_hashedpassword();
      hashedpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashedpassword_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void db_res_users::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_res_users::CopyFrom(const db_res_users& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_res_users::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_res_users::Swap(db_res_users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_res_users::InternalSwap(db_res_users* other) {
  uuiduserid_.Swap(&other->uuiduserid_);
  type_.Swap(&other->type_);
  channel_.UnsafeArenaSwap(&other->channel_);
  uuidcompanyid_.Swap(&other->uuidcompanyid_);
  realname_.Swap(&other->realname_);
  phonenumber_.Swap(&other->phonenumber_);
  emailaddress_.Swap(&other->emailaddress_);
  hashedpassword_.Swap(&other->hashedpassword_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata db_res_users::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_res_users_descriptor_;
  metadata.reflection = db_res_users_reflection_;
  return metadata;
}


// ===================================================================

::std::string* db_res_company::_default_type_ = NULL;
#ifndef _MSC_VER
const int db_res_company::kUuidcompanyidFieldNumber;
const int db_res_company::kTypeFieldNumber;
const int db_res_company::kChannelFieldNumber;
const int db_res_company::kCompanynameFieldNumber;
#endif  // !_MSC_VER

db_res_company::db_res_company()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xkcrm.db_res_company)
}

void db_res_company::InitAsDefaultInstance() {
}

db_res_company::db_res_company(const db_res_company& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xkcrm.db_res_company)
}

void db_res_company::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuidcompanyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  companyname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_res_company::~db_res_company() {
  // @@protoc_insertion_point(destructor:xkcrm.db_res_company)
  SharedDtor();
}

void db_res_company::SharedDtor() {
  uuidcompanyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  companyname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void db_res_company::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_res_company::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_res_company_descriptor_;
}

const db_res_company& db_res_company::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nosqldb_2eproto();
  return *default_instance_;
}

db_res_company* db_res_company::default_instance_ = NULL;

db_res_company* db_res_company::New(::google::protobuf::Arena* arena) const {
  db_res_company* n = new db_res_company;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void db_res_company::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_uuidcompanyid()) {
      uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    if (has_companyname()) {
      companyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool db_res_company::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xkcrm.db_res_company)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuidcompanyid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidcompanyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidcompanyid().data(), this->uuidcompanyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_company.uuidcompanyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "res_company"];
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_company.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // repeated string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_company.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        if (input->ExpectTag(90)) goto parse_companyname;
        break;
      }

      // optional string companyname = 11;
      case 11: {
        if (tag == 90) {
         parse_companyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_company.companyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xkcrm.db_res_company)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xkcrm.db_res_company)
  return false;
#undef DO_
}

void db_res_company::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xkcrm.db_res_company)
  // required string uuidcompanyid = 1;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.uuidcompanyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuidcompanyid(), output);
  }

  // required string type = 2 [default = "res_company"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "xkcrm.db_res_company.channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(i), output);
  }

  // optional string companyname = 11;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.companyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->companyname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xkcrm.db_res_company)
}

::google::protobuf::uint8* db_res_company::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xkcrm.db_res_company)
  // required string uuidcompanyid = 1;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.uuidcompanyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuidcompanyid(), target);
  }

  // required string type = 2 [default = "res_company"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channel(i), target);
  }

  // optional string companyname = 11;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_company.companyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->companyname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xkcrm.db_res_company)
  return target;
}

int db_res_company::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuidcompanyid()) {
    // required string uuidcompanyid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidcompanyid());
  }

  if (has_type()) {
    // required string type = 2 [default = "res_company"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int db_res_company::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uuidcompanyid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidcompanyid());

    // required string type = 2 [default = "res_company"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string companyname = 11;
  if (has_companyname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->companyname());
  }

  // repeated string channel = 3;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_res_company::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const db_res_company* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_res_company*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_res_company::MergeFrom(const db_res_company& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuidcompanyid()) {
      set_has_uuidcompanyid();
      uuidcompanyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidcompanyid_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_companyname()) {
      set_has_companyname();
      companyname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.companyname_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void db_res_company::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_res_company::CopyFrom(const db_res_company& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_res_company::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_res_company::Swap(db_res_company* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_res_company::InternalSwap(db_res_company* other) {
  uuidcompanyid_.Swap(&other->uuidcompanyid_);
  type_.Swap(&other->type_);
  channel_.UnsafeArenaSwap(&other->channel_);
  companyname_.Swap(&other->companyname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata db_res_company::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_res_company_descriptor_;
  metadata.reflection = db_res_company_reflection_;
  return metadata;
}


// ===================================================================

::std::string* db_res_partner::_default_type_ = NULL;
#ifndef _MSC_VER
const int db_res_partner::kUuidpartnerFieldNumber;
const int db_res_partner::kTypeFieldNumber;
const int db_res_partner::kChannelFieldNumber;
const int db_res_partner::kPartnernameFieldNumber;
#endif  // !_MSC_VER

db_res_partner::db_res_partner()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xkcrm.db_res_partner)
}

void db_res_partner::InitAsDefaultInstance() {
}

db_res_partner::db_res_partner(const db_res_partner& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xkcrm.db_res_partner)
}

void db_res_partner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuidpartner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  partnername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_res_partner::~db_res_partner() {
  // @@protoc_insertion_point(destructor:xkcrm.db_res_partner)
  SharedDtor();
}

void db_res_partner::SharedDtor() {
  uuidpartner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  partnername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void db_res_partner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_res_partner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_res_partner_descriptor_;
}

const db_res_partner& db_res_partner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nosqldb_2eproto();
  return *default_instance_;
}

db_res_partner* db_res_partner::default_instance_ = NULL;

db_res_partner* db_res_partner::New(::google::protobuf::Arena* arena) const {
  db_res_partner* n = new db_res_partner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void db_res_partner::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_uuidpartner()) {
      uuidpartner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    if (has_partnername()) {
      partnername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool db_res_partner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xkcrm.db_res_partner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuidpartner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidpartner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidpartner().data(), this->uuidpartner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_partner.uuidpartner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "res_partner"];
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_partner.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // repeated string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_partner.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        if (input->ExpectTag(90)) goto parse_partnername;
        break;
      }

      // optional string partnername = 11;
      case 11: {
        if (tag == 90) {
         parse_partnername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partnername().data(), this->partnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_res_partner.partnername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xkcrm.db_res_partner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xkcrm.db_res_partner)
  return false;
#undef DO_
}

void db_res_partner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xkcrm.db_res_partner)
  // required string uuidpartner = 1;
  if (has_uuidpartner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidpartner().data(), this->uuidpartner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.uuidpartner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuidpartner(), output);
  }

  // required string type = 2 [default = "res_partner"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "xkcrm.db_res_partner.channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(i), output);
  }

  // optional string partnername = 11;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.partnername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->partnername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xkcrm.db_res_partner)
}

::google::protobuf::uint8* db_res_partner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xkcrm.db_res_partner)
  // required string uuidpartner = 1;
  if (has_uuidpartner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidpartner().data(), this->uuidpartner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.uuidpartner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuidpartner(), target);
  }

  // required string type = 2 [default = "res_partner"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channel(i), target);
  }

  // optional string partnername = 11;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_res_partner.partnername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->partnername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xkcrm.db_res_partner)
  return target;
}

int db_res_partner::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuidpartner()) {
    // required string uuidpartner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidpartner());
  }

  if (has_type()) {
    // required string type = 2 [default = "res_partner"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int db_res_partner::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string uuidpartner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidpartner());

    // required string type = 2 [default = "res_partner"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string partnername = 11;
  if (has_partnername()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partnername());
  }

  // repeated string channel = 3;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_res_partner::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const db_res_partner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_res_partner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_res_partner::MergeFrom(const db_res_partner& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuidpartner()) {
      set_has_uuidpartner();
      uuidpartner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidpartner_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_partnername()) {
      set_has_partnername();
      partnername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnername_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void db_res_partner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_res_partner::CopyFrom(const db_res_partner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_res_partner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_res_partner::Swap(db_res_partner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_res_partner::InternalSwap(db_res_partner* other) {
  uuidpartner_.Swap(&other->uuidpartner_);
  type_.Swap(&other->type_);
  channel_.UnsafeArenaSwap(&other->channel_);
  partnername_.Swap(&other->partnername_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata db_res_partner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_res_partner_descriptor_;
  metadata.reflection = db_res_partner_reflection_;
  return metadata;
}


// ===================================================================

::std::string* db_crm_lead::_default_type_ = NULL;
#ifndef _MSC_VER
const int db_crm_lead::kUuidleadidFieldNumber;
const int db_crm_lead::kTypeFieldNumber;
const int db_crm_lead::kChannelFieldNumber;
const int db_crm_lead::kUuiduseridFieldNumber;
const int db_crm_lead::kUuidcompanyidFieldNumber;
const int db_crm_lead::kLeadnameFieldNumber;
const int db_crm_lead::kCreatedateFieldNumber;
const int db_crm_lead::kPartnernameFieldNumber;
const int db_crm_lead::kStreetFieldNumber;
#endif  // !_MSC_VER

db_crm_lead::db_crm_lead()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xkcrm.db_crm_lead)
}

void db_crm_lead::InitAsDefaultInstance() {
}

db_crm_lead::db_crm_lead(const db_crm_lead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xkcrm.db_crm_lead)
}

void db_crm_lead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuidleadid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  uuiduserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidcompanyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leadname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crm_lead::~db_crm_lead() {
  // @@protoc_insertion_point(destructor:xkcrm.db_crm_lead)
  SharedDtor();
}

void db_crm_lead::SharedDtor() {
  uuidleadid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  uuiduserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidcompanyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leadname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partnername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void db_crm_lead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crm_lead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crm_lead_descriptor_;
}

const db_crm_lead& db_crm_lead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nosqldb_2eproto();
  return *default_instance_;
}

db_crm_lead* db_crm_lead::default_instance_ = NULL;

db_crm_lead* db_crm_lead::New(::google::protobuf::Arena* arena) const {
  db_crm_lead* n = new db_crm_lead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void db_crm_lead::Clear() {
  if (_has_bits_[0 / 32] & 251) {
    if (has_uuidleadid()) {
      uuidleadid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    if (has_uuiduserid()) {
      uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuidcompanyid()) {
      uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_leadname()) {
      leadname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_createdate()) {
      createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_partnername()) {
      partnername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_street()) {
    street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool db_crm_lead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xkcrm.db_crm_lead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuidleadid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidleadid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidleadid().data(), this->uuidleadid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.uuidleadid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "crm_lead"];
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // repeated string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        if (input->ExpectTag(34)) goto parse_uuiduserid;
        break;
      }

      // required string uuiduserid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuiduserid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuiduserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuiduserid().data(), this->uuiduserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.uuiduserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uuidcompanyid;
        break;
      }

      // optional string uuidcompanyid = 5;
      case 5: {
        if (tag == 42) {
         parse_uuidcompanyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidcompanyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidcompanyid().data(), this->uuidcompanyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.uuidcompanyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_leadname;
        break;
      }

      // optional string leadname = 10;
      case 10: {
        if (tag == 82) {
         parse_leadname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadname().data(), this->leadname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.leadname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_createdate;
        break;
      }

      // optional string createdate = 11;
      case 11: {
        if (tag == 90) {
         parse_createdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.createdate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_partnername;
        break;
      }

      // optional string partnername = 12;
      case 12: {
        if (tag == 98) {
         parse_partnername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partnername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partnername().data(), this->partnername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.partnername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_street;
        break;
      }

      // optional string street = 17;
      case 17: {
        if (tag == 138) {
         parse_street:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->street().data(), this->street().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_lead.street");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xkcrm.db_crm_lead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xkcrm.db_crm_lead)
  return false;
#undef DO_
}

void db_crm_lead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xkcrm.db_crm_lead)
  // required string uuidleadid = 1;
  if (has_uuidleadid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidleadid().data(), this->uuidleadid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuidleadid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuidleadid(), output);
  }

  // required string type = 2 [default = "crm_lead"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "xkcrm.db_crm_lead.channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(i), output);
  }

  // required string uuiduserid = 4;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuiduserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuiduserid(), output);
  }

  // optional string uuidcompanyid = 5;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuidcompanyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uuidcompanyid(), output);
  }

  // optional string leadname = 10;
  if (has_leadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadname().data(), this->leadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.leadname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->leadname(), output);
  }

  // optional string createdate = 11;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.createdate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->createdate(), output);
  }

  // optional string partnername = 12;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.partnername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->partnername(), output);
  }

  // optional string street = 17;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.street");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->street(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xkcrm.db_crm_lead)
}

::google::protobuf::uint8* db_crm_lead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xkcrm.db_crm_lead)
  // required string uuidleadid = 1;
  if (has_uuidleadid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidleadid().data(), this->uuidleadid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuidleadid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuidleadid(), target);
  }

  // required string type = 2 [default = "crm_lead"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channel(i), target);
  }

  // required string uuiduserid = 4;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuiduserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuiduserid(), target);
  }

  // optional string uuidcompanyid = 5;
  if (has_uuidcompanyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidcompanyid().data(), this->uuidcompanyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.uuidcompanyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuidcompanyid(), target);
  }

  // optional string leadname = 10;
  if (has_leadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadname().data(), this->leadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.leadname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->leadname(), target);
  }

  // optional string createdate = 11;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.createdate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->createdate(), target);
  }

  // optional string partnername = 12;
  if (has_partnername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partnername().data(), this->partnername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.partnername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->partnername(), target);
  }

  // optional string street = 17;
  if (has_street()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->street().data(), this->street().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_lead.street");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->street(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xkcrm.db_crm_lead)
  return target;
}

int db_crm_lead::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuidleadid()) {
    // required string uuidleadid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidleadid());
  }

  if (has_type()) {
    // required string type = 2 [default = "crm_lead"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_uuiduserid()) {
    // required string uuiduserid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());
  }

  return total_size;
}
int db_crm_lead::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string uuidleadid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidleadid());

    // required string type = 2 [default = "crm_lead"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string uuiduserid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 240) {
    // optional string uuidcompanyid = 5;
    if (has_uuidcompanyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuidcompanyid());
    }

    // optional string leadname = 10;
    if (has_leadname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadname());
    }

    // optional string createdate = 11;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }

    // optional string partnername = 12;
    if (has_partnername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partnername());
    }

  }
  // optional string street = 17;
  if (has_street()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->street());
  }

  // repeated string channel = 3;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crm_lead::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const db_crm_lead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crm_lead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crm_lead::MergeFrom(const db_crm_lead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuidleadid()) {
      set_has_uuidleadid();
      uuidleadid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidleadid_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_uuiduserid()) {
      set_has_uuiduserid();
      uuiduserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuiduserid_);
    }
    if (from.has_uuidcompanyid()) {
      set_has_uuidcompanyid();
      uuidcompanyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidcompanyid_);
    }
    if (from.has_leadname()) {
      set_has_leadname();
      leadname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leadname_);
    }
    if (from.has_createdate()) {
      set_has_createdate();
      createdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdate_);
    }
    if (from.has_partnername()) {
      set_has_partnername();
      partnername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partnername_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_street()) {
      set_has_street();
      street_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.street_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void db_crm_lead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crm_lead::CopyFrom(const db_crm_lead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crm_lead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void db_crm_lead::Swap(db_crm_lead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_crm_lead::InternalSwap(db_crm_lead* other) {
  uuidleadid_.Swap(&other->uuidleadid_);
  type_.Swap(&other->type_);
  channel_.UnsafeArenaSwap(&other->channel_);
  uuiduserid_.Swap(&other->uuiduserid_);
  uuidcompanyid_.Swap(&other->uuidcompanyid_);
  leadname_.Swap(&other->leadname_);
  createdate_.Swap(&other->createdate_);
  partnername_.Swap(&other->partnername_);
  street_.Swap(&other->street_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata db_crm_lead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crm_lead_descriptor_;
  metadata.reflection = db_crm_lead_reflection_;
  return metadata;
}


// ===================================================================

::std::string* db_crm_phonecall::_default_type_ = NULL;
#ifndef _MSC_VER
const int db_crm_phonecall::kUuidphonecallidFieldNumber;
const int db_crm_phonecall::kTypeFieldNumber;
const int db_crm_phonecall::kChannelFieldNumber;
const int db_crm_phonecall::kUuiduseridFieldNumber;
const int db_crm_phonecall::kUuidpartnerFieldNumber;
#endif  // !_MSC_VER

db_crm_phonecall::db_crm_phonecall()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xkcrm.db_crm_phonecall)
}

void db_crm_phonecall::InitAsDefaultInstance() {
}

db_crm_phonecall::db_crm_phonecall(const db_crm_phonecall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xkcrm.db_crm_phonecall)
}

void db_crm_phonecall::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuidphonecallid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(_default_type_);
  uuiduserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidpartner_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_crm_phonecall::~db_crm_phonecall() {
  // @@protoc_insertion_point(destructor:xkcrm.db_crm_phonecall)
  SharedDtor();
}

void db_crm_phonecall::SharedDtor() {
  uuidphonecallid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(_default_type_);
  uuiduserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuidpartner_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void db_crm_phonecall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_crm_phonecall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_crm_phonecall_descriptor_;
}

const db_crm_phonecall& db_crm_phonecall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nosqldb_2eproto();
  return *default_instance_;
}

db_crm_phonecall* db_crm_phonecall::default_instance_ = NULL;

db_crm_phonecall* db_crm_phonecall::New(::google::protobuf::Arena* arena) const {
  db_crm_phonecall* n = new db_crm_phonecall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void db_crm_phonecall::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_uuidphonecallid()) {
      uuidphonecallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToDefaultNoArena(_default_type_);
    }
    if (has_uuiduserid()) {
      uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuidpartner()) {
      uuidpartner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool db_crm_phonecall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xkcrm.db_crm_phonecall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuidphonecallid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidphonecallid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidphonecallid().data(), this->uuidphonecallid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_phonecall.uuidphonecallid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = "crm_phonecall"];
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_phonecall.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // repeated string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel(this->channel_size() - 1).data(),
            this->channel(this->channel_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_phonecall.channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        if (input->ExpectTag(34)) goto parse_uuiduserid;
        break;
      }

      // required string uuiduserid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuiduserid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuiduserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuiduserid().data(), this->uuiduserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_phonecall.uuiduserid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_uuidpartner;
        break;
      }

      // optional string uuidpartner = 5;
      case 5: {
        if (tag == 42) {
         parse_uuidpartner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuidpartner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuidpartner().data(), this->uuidpartner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xkcrm.db_crm_phonecall.uuidpartner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xkcrm.db_crm_phonecall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xkcrm.db_crm_phonecall)
  return false;
#undef DO_
}

void db_crm_phonecall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xkcrm.db_crm_phonecall)
  // required string uuidphonecallid = 1;
  if (has_uuidphonecallid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidphonecallid().data(), this->uuidphonecallid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuidphonecallid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuidphonecallid(), output);
  }

  // required string type = 2 [default = "crm_phonecall"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->channel(i).data(), this->channel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "xkcrm.db_crm_phonecall.channel");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel(i), output);
  }

  // required string uuiduserid = 4;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuiduserid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuiduserid(), output);
  }

  // optional string uuidpartner = 5;
  if (has_uuidpartner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidpartner().data(), this->uuidpartner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuidpartner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uuidpartner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xkcrm.db_crm_phonecall)
}

::google::protobuf::uint8* db_crm_phonecall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xkcrm.db_crm_phonecall)
  // required string uuidphonecallid = 1;
  if (has_uuidphonecallid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidphonecallid().data(), this->uuidphonecallid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuidphonecallid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuidphonecallid(), target);
  }

  // required string type = 2 [default = "crm_phonecall"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // repeated string channel = 3;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel(i).data(), this->channel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.channel");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->channel(i), target);
  }

  // required string uuiduserid = 4;
  if (has_uuiduserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuiduserid().data(), this->uuiduserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuiduserid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuiduserid(), target);
  }

  // optional string uuidpartner = 5;
  if (has_uuidpartner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuidpartner().data(), this->uuidpartner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xkcrm.db_crm_phonecall.uuidpartner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uuidpartner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xkcrm.db_crm_phonecall)
  return target;
}

int db_crm_phonecall::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_uuidphonecallid()) {
    // required string uuidphonecallid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidphonecallid());
  }

  if (has_type()) {
    // required string type = 2 [default = "crm_phonecall"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_uuiduserid()) {
    // required string uuiduserid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());
  }

  return total_size;
}
int db_crm_phonecall::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string uuidphonecallid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidphonecallid());

    // required string type = 2 [default = "crm_phonecall"];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required string uuiduserid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuiduserid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string uuidpartner = 5;
  if (has_uuidpartner()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuidpartner());
  }

  // repeated string channel = 3;
  total_size += 1 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->channel(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_crm_phonecall::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const db_crm_phonecall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_crm_phonecall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_crm_phonecall::MergeFrom(const db_crm_phonecall& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuidphonecallid()) {
      set_has_uuidphonecallid();
      uuidphonecallid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidphonecallid_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(_default_type_, from.type_);
    }
    if (from.has_uuiduserid()) {
      set_has_uuiduserid();
      uuiduserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuiduserid_);
    }
    if (from.has_uuidpartner()) {
      set_has_uuidpartner();
      uuidpartner_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuidpartner_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void db_crm_phonecall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_crm_phonecall::CopyFrom(const db_crm_phonecall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_crm_phonecall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void db_crm_phonecall::Swap(db_crm_phonecall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_crm_phonecall::InternalSwap(db_crm_phonecall* other) {
  uuidphonecallid_.Swap(&other->uuidphonecallid_);
  type_.Swap(&other->type_);
  channel_.UnsafeArenaSwap(&other->channel_);
  uuiduserid_.Swap(&other->uuiduserid_);
  uuidpartner_.Swap(&other->uuidpartner_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata db_crm_phonecall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_crm_phonecall_descriptor_;
  metadata.reflection = db_crm_phonecall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xkcrm

// @@protoc_insertion_point(global_scope)
