// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xkcrm.proto

#ifndef PROTOBUF_xkcrm_2eproto__INCLUDED
#define PROTOBUF_xkcrm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "nosqldb.pb.h"
// @@protoc_insertion_point(includes)

namespace xkcrm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_xkcrm_2eproto();
void protobuf_AssignDesc_xkcrm_2eproto();
void protobuf_ShutdownFile_xkcrm_2eproto();

class PkgUserLoginReq;
class PkgUserLoginReply;
class PkgOptPartnerReq;
class PkgOptPartnerReply;
class PkgOptLeadReq;
class PkgOptLeadReply;
class PkgOptPhonecallReq;
class PkgOptPhonecallReply;
class PkgQueryCondition;
class PkgPageQueryPartnerReq;
class PkgPageQueryPartnerReply;
class PkgPageQueryLeadReq;
class PkgPageQueryLeadReply;
class PkgPageQueryPhonecallReq;
class PkgPageQueryPhonecallReply;

enum EnGetType {
  GT_PHONE = 0,
  GT_EMAIL = 1,
  GT_USERID = 2,
  GT_USERNAME = 3
};
bool EnGetType_IsValid(int value);
const EnGetType EnGetType_MIN = GT_PHONE;
const EnGetType EnGetType_MAX = GT_USERNAME;
const int EnGetType_ARRAYSIZE = EnGetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnGetType_descriptor();
inline const ::std::string& EnGetType_Name(EnGetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnGetType_descriptor(), value);
}
inline bool EnGetType_Parse(
    const ::std::string& name, EnGetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnGetType>(
    EnGetType_descriptor(), name, value);
}
enum EnOperation {
  TO_INSERT = 1,
  TO_UPDATE = 16,
  TO_DELETE = 64
};
bool EnOperation_IsValid(int value);
const EnOperation EnOperation_MIN = TO_INSERT;
const EnOperation EnOperation_MAX = TO_DELETE;
const int EnOperation_ARRAYSIZE = EnOperation_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnOperation_descriptor();
inline const ::std::string& EnOperation_Name(EnOperation value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnOperation_descriptor(), value);
}
inline bool EnOperation_Parse(
    const ::std::string& name, EnOperation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnOperation>(
    EnOperation_descriptor(), name, value);
}
enum EnQueryCondition {
  TQC_DATESTART = 1,
  TQC_DATEEND = 2,
  TQC_KEYFORNAME = 4,
  TQC_KEYFORCONTENT = 8,
  TQC_PARTNERUUID = 16,
  TQC_LEADUUID = 32,
  TQC_SELFUUID = 64
};
bool EnQueryCondition_IsValid(int value);
const EnQueryCondition EnQueryCondition_MIN = TQC_DATESTART;
const EnQueryCondition EnQueryCondition_MAX = TQC_SELFUUID;
const int EnQueryCondition_ARRAYSIZE = EnQueryCondition_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnQueryCondition_descriptor();
inline const ::std::string& EnQueryCondition_Name(EnQueryCondition value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnQueryCondition_descriptor(), value);
}
inline bool EnQueryCondition_Parse(
    const ::std::string& name, EnQueryCondition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnQueryCondition>(
    EnQueryCondition_descriptor(), name, value);
}
enum EnPageFlag {
  P_ONLYNUM = 1,
  P_RETURNALL = 2,
  P_RETURNPAGE = 3
};
bool EnPageFlag_IsValid(int value);
const EnPageFlag EnPageFlag_MIN = P_ONLYNUM;
const EnPageFlag EnPageFlag_MAX = P_RETURNPAGE;
const int EnPageFlag_ARRAYSIZE = EnPageFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnPageFlag_descriptor();
inline const ::std::string& EnPageFlag_Name(EnPageFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnPageFlag_descriptor(), value);
}
inline bool EnPageFlag_Parse(
    const ::std::string& name, EnPageFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnPageFlag>(
    EnPageFlag_descriptor(), name, value);
}
// ===================================================================

class PkgUserLoginReq : public ::google::protobuf::Message {
 public:
  PkgUserLoginReq();
  virtual ~PkgUserLoginReq();

  PkgUserLoginReq(const PkgUserLoginReq& from);

  inline PkgUserLoginReq& operator=(const PkgUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgUserLoginReq& default_instance();

  void Swap(PkgUserLoginReq* other);

  // implements Message ----------------------------------------------

  inline PkgUserLoginReq* New() const { return New(NULL); }

  PkgUserLoginReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgUserLoginReq& from);
  void MergeFrom(const PkgUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgUserLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xkcrm.EnGetType gettype = 1 [default = GT_PHONE];
  inline bool has_gettype() const;
  inline void clear_gettype();
  static const int kGettypeFieldNumber = 1;
  inline ::xkcrm::EnGetType gettype() const;
  inline void set_gettype(::xkcrm::EnGetType value);

  // optional int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string phonenumber = 3;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 3;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string emailaddress = 4;
  inline bool has_emailaddress() const;
  inline void clear_emailaddress();
  static const int kEmailaddressFieldNumber = 4;
  inline const ::std::string& emailaddress() const;
  inline void set_emailaddress(const ::std::string& value);
  inline void set_emailaddress(const char* value);
  inline void set_emailaddress(const char* value, size_t size);
  inline ::std::string* mutable_emailaddress();
  inline ::std::string* release_emailaddress();
  inline void set_allocated_emailaddress(::std::string* emailaddress);

  // optional string username = 5;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 5;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 10;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 10;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string hashedserversn = 100;
  inline bool has_hashedserversn() const;
  inline void clear_hashedserversn();
  static const int kHashedserversnFieldNumber = 100;
  inline const ::std::string& hashedserversn() const;
  inline void set_hashedserversn(const ::std::string& value);
  inline void set_hashedserversn(const char* value);
  inline void set_hashedserversn(const char* value, size_t size);
  inline ::std::string* mutable_hashedserversn();
  inline ::std::string* release_hashedserversn();
  inline void set_allocated_hashedserversn(::std::string* hashedserversn);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgUserLoginReq)
 private:
  inline void set_has_gettype();
  inline void clear_has_gettype();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_emailaddress();
  inline void clear_has_emailaddress();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_hashedserversn();
  inline void clear_has_hashedserversn();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int gettype_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::internal::ArenaStringPtr emailaddress_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr hashedserversn_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgUserLoginReply : public ::google::protobuf::Message {
 public:
  PkgUserLoginReply();
  virtual ~PkgUserLoginReply();

  PkgUserLoginReply(const PkgUserLoginReply& from);

  inline PkgUserLoginReply& operator=(const PkgUserLoginReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgUserLoginReply& default_instance();

  void Swap(PkgUserLoginReply* other);

  // implements Message ----------------------------------------------

  inline PkgUserLoginReply* New() const { return New(NULL); }

  PkgUserLoginReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgUserLoginReply& from);
  void MergeFrom(const PkgUserLoginReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgUserLoginReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1 [default = true];
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // optional .xkcrm.db_res_users userinfo = 11;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 11;
  inline const ::xkcrm::db_res_users& userinfo() const;
  inline ::xkcrm::db_res_users* mutable_userinfo();
  inline ::xkcrm::db_res_users* release_userinfo();
  inline void set_allocated_userinfo(::xkcrm::db_res_users* userinfo);

  // optional .xkcrm.db_res_company companyinfo = 12;
  inline bool has_companyinfo() const;
  inline void clear_companyinfo();
  static const int kCompanyinfoFieldNumber = 12;
  inline const ::xkcrm::db_res_company& companyinfo() const;
  inline ::xkcrm::db_res_company* mutable_companyinfo();
  inline ::xkcrm::db_res_company* release_companyinfo();
  inline void set_allocated_companyinfo(::xkcrm::db_res_company* companyinfo);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgUserLoginReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_companyinfo();
  inline void clear_has_companyinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::xkcrm::db_res_users* userinfo_;
  ::xkcrm::db_res_company* companyinfo_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgUserLoginReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptPartnerReq : public ::google::protobuf::Message {
 public:
  PkgOptPartnerReq();
  virtual ~PkgOptPartnerReq();

  PkgOptPartnerReq(const PkgOptPartnerReq& from);

  inline PkgOptPartnerReq& operator=(const PkgOptPartnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptPartnerReq& default_instance();

  void Swap(PkgOptPartnerReq* other);

  // implements Message ----------------------------------------------

  inline PkgOptPartnerReq* New() const { return New(NULL); }

  PkgOptPartnerReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptPartnerReq& from);
  void MergeFrom(const PkgOptPartnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptPartnerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xkcrm.EnOperation opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::xkcrm::EnOperation opt() const;
  inline void set_opt(::xkcrm::EnOperation value);

  // optional .xkcrm.db_res_partner partner = 2;
  inline bool has_partner() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 2;
  inline const ::xkcrm::db_res_partner& partner() const;
  inline ::xkcrm::db_res_partner* mutable_partner();
  inline ::xkcrm::db_res_partner* release_partner();
  inline void set_allocated_partner(::xkcrm::db_res_partner* partner);

  // optional string uuidpartner = 3;
  inline bool has_uuidpartner() const;
  inline void clear_uuidpartner();
  static const int kUuidpartnerFieldNumber = 3;
  inline const ::std::string& uuidpartner() const;
  inline void set_uuidpartner(const ::std::string& value);
  inline void set_uuidpartner(const char* value);
  inline void set_uuidpartner(const char* value, size_t size);
  inline ::std::string* mutable_uuidpartner();
  inline ::std::string* release_uuidpartner();
  inline void set_allocated_uuidpartner(::std::string* uuidpartner);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptPartnerReq)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_partner();
  inline void clear_has_partner();
  inline void set_has_uuidpartner();
  inline void clear_has_uuidpartner();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::db_res_partner* partner_;
  ::google::protobuf::internal::ArenaStringPtr uuidpartner_;
  int opt_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptPartnerReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptPartnerReply : public ::google::protobuf::Message {
 public:
  PkgOptPartnerReply();
  virtual ~PkgOptPartnerReply();

  PkgOptPartnerReply(const PkgOptPartnerReply& from);

  inline PkgOptPartnerReply& operator=(const PkgOptPartnerReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptPartnerReply& default_instance();

  void Swap(PkgOptPartnerReply* other);

  // implements Message ----------------------------------------------

  inline PkgOptPartnerReply* New() const { return New(NULL); }

  PkgOptPartnerReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptPartnerReply& from);
  void MergeFrom(const PkgOptPartnerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptPartnerReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptPartnerReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptPartnerReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptLeadReq : public ::google::protobuf::Message {
 public:
  PkgOptLeadReq();
  virtual ~PkgOptLeadReq();

  PkgOptLeadReq(const PkgOptLeadReq& from);

  inline PkgOptLeadReq& operator=(const PkgOptLeadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptLeadReq& default_instance();

  void Swap(PkgOptLeadReq* other);

  // implements Message ----------------------------------------------

  inline PkgOptLeadReq* New() const { return New(NULL); }

  PkgOptLeadReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptLeadReq& from);
  void MergeFrom(const PkgOptLeadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptLeadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xkcrm.EnOperation opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::xkcrm::EnOperation opt() const;
  inline void set_opt(::xkcrm::EnOperation value);

  // optional .xkcrm.db_crm_lead lead = 2;
  inline bool has_lead() const;
  inline void clear_lead();
  static const int kLeadFieldNumber = 2;
  inline const ::xkcrm::db_crm_lead& lead() const;
  inline ::xkcrm::db_crm_lead* mutable_lead();
  inline ::xkcrm::db_crm_lead* release_lead();
  inline void set_allocated_lead(::xkcrm::db_crm_lead* lead);

  // optional string uuidleadid = 3;
  inline bool has_uuidleadid() const;
  inline void clear_uuidleadid();
  static const int kUuidleadidFieldNumber = 3;
  inline const ::std::string& uuidleadid() const;
  inline void set_uuidleadid(const ::std::string& value);
  inline void set_uuidleadid(const char* value);
  inline void set_uuidleadid(const char* value, size_t size);
  inline ::std::string* mutable_uuidleadid();
  inline ::std::string* release_uuidleadid();
  inline void set_allocated_uuidleadid(::std::string* uuidleadid);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptLeadReq)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_lead();
  inline void clear_has_lead();
  inline void set_has_uuidleadid();
  inline void clear_has_uuidleadid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::db_crm_lead* lead_;
  ::google::protobuf::internal::ArenaStringPtr uuidleadid_;
  int opt_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptLeadReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptLeadReply : public ::google::protobuf::Message {
 public:
  PkgOptLeadReply();
  virtual ~PkgOptLeadReply();

  PkgOptLeadReply(const PkgOptLeadReply& from);

  inline PkgOptLeadReply& operator=(const PkgOptLeadReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptLeadReply& default_instance();

  void Swap(PkgOptLeadReply* other);

  // implements Message ----------------------------------------------

  inline PkgOptLeadReply* New() const { return New(NULL); }

  PkgOptLeadReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptLeadReply& from);
  void MergeFrom(const PkgOptLeadReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptLeadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptLeadReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptLeadReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptPhonecallReq : public ::google::protobuf::Message {
 public:
  PkgOptPhonecallReq();
  virtual ~PkgOptPhonecallReq();

  PkgOptPhonecallReq(const PkgOptPhonecallReq& from);

  inline PkgOptPhonecallReq& operator=(const PkgOptPhonecallReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptPhonecallReq& default_instance();

  void Swap(PkgOptPhonecallReq* other);

  // implements Message ----------------------------------------------

  inline PkgOptPhonecallReq* New() const { return New(NULL); }

  PkgOptPhonecallReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptPhonecallReq& from);
  void MergeFrom(const PkgOptPhonecallReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptPhonecallReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xkcrm.EnOperation opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::xkcrm::EnOperation opt() const;
  inline void set_opt(::xkcrm::EnOperation value);

  // optional .xkcrm.db_crm_phonecall phonecall = 2;
  inline bool has_phonecall() const;
  inline void clear_phonecall();
  static const int kPhonecallFieldNumber = 2;
  inline const ::xkcrm::db_crm_phonecall& phonecall() const;
  inline ::xkcrm::db_crm_phonecall* mutable_phonecall();
  inline ::xkcrm::db_crm_phonecall* release_phonecall();
  inline void set_allocated_phonecall(::xkcrm::db_crm_phonecall* phonecall);

  // optional string uuidphonecallid = 3;
  inline bool has_uuidphonecallid() const;
  inline void clear_uuidphonecallid();
  static const int kUuidphonecallidFieldNumber = 3;
  inline const ::std::string& uuidphonecallid() const;
  inline void set_uuidphonecallid(const ::std::string& value);
  inline void set_uuidphonecallid(const char* value);
  inline void set_uuidphonecallid(const char* value, size_t size);
  inline ::std::string* mutable_uuidphonecallid();
  inline ::std::string* release_uuidphonecallid();
  inline void set_allocated_uuidphonecallid(::std::string* uuidphonecallid);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptPhonecallReq)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_phonecall();
  inline void clear_has_phonecall();
  inline void set_has_uuidphonecallid();
  inline void clear_has_uuidphonecallid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::db_crm_phonecall* phonecall_;
  ::google::protobuf::internal::ArenaStringPtr uuidphonecallid_;
  int opt_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptPhonecallReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgOptPhonecallReply : public ::google::protobuf::Message {
 public:
  PkgOptPhonecallReply();
  virtual ~PkgOptPhonecallReply();

  PkgOptPhonecallReply(const PkgOptPhonecallReply& from);

  inline PkgOptPhonecallReply& operator=(const PkgOptPhonecallReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgOptPhonecallReply& default_instance();

  void Swap(PkgOptPhonecallReply* other);

  // implements Message ----------------------------------------------

  inline PkgOptPhonecallReply* New() const { return New(NULL); }

  PkgOptPhonecallReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgOptPhonecallReply& from);
  void MergeFrom(const PkgOptPhonecallReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgOptPhonecallReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgOptPhonecallReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgOptPhonecallReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgQueryCondition : public ::google::protobuf::Message {
 public:
  PkgQueryCondition();
  virtual ~PkgQueryCondition();

  PkgQueryCondition(const PkgQueryCondition& from);

  inline PkgQueryCondition& operator=(const PkgQueryCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgQueryCondition& default_instance();

  void Swap(PkgQueryCondition* other);

  // implements Message ----------------------------------------------

  inline PkgQueryCondition* New() const { return New(NULL); }

  PkgQueryCondition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgQueryCondition& from);
  void MergeFrom(const PkgQueryCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgQueryCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string taskdatestart = 2;
  inline bool has_taskdatestart() const;
  inline void clear_taskdatestart();
  static const int kTaskdatestartFieldNumber = 2;
  inline const ::std::string& taskdatestart() const;
  inline void set_taskdatestart(const ::std::string& value);
  inline void set_taskdatestart(const char* value);
  inline void set_taskdatestart(const char* value, size_t size);
  inline ::std::string* mutable_taskdatestart();
  inline ::std::string* release_taskdatestart();
  inline void set_allocated_taskdatestart(::std::string* taskdatestart);

  // optional string taskdateend = 3;
  inline bool has_taskdateend() const;
  inline void clear_taskdateend();
  static const int kTaskdateendFieldNumber = 3;
  inline const ::std::string& taskdateend() const;
  inline void set_taskdateend(const ::std::string& value);
  inline void set_taskdateend(const char* value);
  inline void set_taskdateend(const char* value, size_t size);
  inline ::std::string* mutable_taskdateend();
  inline ::std::string* release_taskdateend();
  inline void set_allocated_taskdateend(::std::string* taskdateend);

  // optional string keyforname = 4;
  inline bool has_keyforname() const;
  inline void clear_keyforname();
  static const int kKeyfornameFieldNumber = 4;
  inline const ::std::string& keyforname() const;
  inline void set_keyforname(const ::std::string& value);
  inline void set_keyforname(const char* value);
  inline void set_keyforname(const char* value, size_t size);
  inline ::std::string* mutable_keyforname();
  inline ::std::string* release_keyforname();
  inline void set_allocated_keyforname(::std::string* keyforname);

  // optional string keyforcontent = 5;
  inline bool has_keyforcontent() const;
  inline void clear_keyforcontent();
  static const int kKeyforcontentFieldNumber = 5;
  inline const ::std::string& keyforcontent() const;
  inline void set_keyforcontent(const ::std::string& value);
  inline void set_keyforcontent(const char* value);
  inline void set_keyforcontent(const char* value, size_t size);
  inline ::std::string* mutable_keyforcontent();
  inline ::std::string* release_keyforcontent();
  inline void set_allocated_keyforcontent(::std::string* keyforcontent);

  // optional string partneruuid = 10;
  inline bool has_partneruuid() const;
  inline void clear_partneruuid();
  static const int kPartneruuidFieldNumber = 10;
  inline const ::std::string& partneruuid() const;
  inline void set_partneruuid(const ::std::string& value);
  inline void set_partneruuid(const char* value);
  inline void set_partneruuid(const char* value, size_t size);
  inline ::std::string* mutable_partneruuid();
  inline ::std::string* release_partneruuid();
  inline void set_allocated_partneruuid(::std::string* partneruuid);

  // optional string leaduuid = 11;
  inline bool has_leaduuid() const;
  inline void clear_leaduuid();
  static const int kLeaduuidFieldNumber = 11;
  inline const ::std::string& leaduuid() const;
  inline void set_leaduuid(const ::std::string& value);
  inline void set_leaduuid(const char* value);
  inline void set_leaduuid(const char* value, size_t size);
  inline ::std::string* mutable_leaduuid();
  inline ::std::string* release_leaduuid();
  inline void set_allocated_leaduuid(::std::string* leaduuid);

  // optional string selfuuid = 100;
  inline bool has_selfuuid() const;
  inline void clear_selfuuid();
  static const int kSelfuuidFieldNumber = 100;
  inline const ::std::string& selfuuid() const;
  inline void set_selfuuid(const ::std::string& value);
  inline void set_selfuuid(const char* value);
  inline void set_selfuuid(const char* value, size_t size);
  inline ::std::string* mutable_selfuuid();
  inline ::std::string* release_selfuuid();
  inline void set_allocated_selfuuid(::std::string* selfuuid);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgQueryCondition)
 private:
  inline void set_has_taskdatestart();
  inline void clear_has_taskdatestart();
  inline void set_has_taskdateend();
  inline void clear_has_taskdateend();
  inline void set_has_keyforname();
  inline void clear_has_keyforname();
  inline void set_has_keyforcontent();
  inline void clear_has_keyforcontent();
  inline void set_has_partneruuid();
  inline void clear_has_partneruuid();
  inline void set_has_leaduuid();
  inline void clear_has_leaduuid();
  inline void set_has_selfuuid();
  inline void clear_has_selfuuid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr taskdatestart_;
  ::google::protobuf::internal::ArenaStringPtr taskdateend_;
  ::google::protobuf::internal::ArenaStringPtr keyforname_;
  ::google::protobuf::internal::ArenaStringPtr keyforcontent_;
  ::google::protobuf::internal::ArenaStringPtr partneruuid_;
  ::google::protobuf::internal::ArenaStringPtr leaduuid_;
  ::google::protobuf::internal::ArenaStringPtr selfuuid_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgQueryCondition* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryPartnerReq : public ::google::protobuf::Message {
 public:
  PkgPageQueryPartnerReq();
  virtual ~PkgPageQueryPartnerReq();

  PkgPageQueryPartnerReq(const PkgPageQueryPartnerReq& from);

  inline PkgPageQueryPartnerReq& operator=(const PkgPageQueryPartnerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryPartnerReq& default_instance();

  void Swap(PkgPageQueryPartnerReq* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryPartnerReq* New() const { return New(NULL); }

  PkgPageQueryPartnerReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryPartnerReq& from);
  void MergeFrom(const PkgPageQueryPartnerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryPartnerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enconditon = 2 [default = 0];
  inline bool has_enconditon() const;
  inline void clear_enconditon();
  static const int kEnconditonFieldNumber = 2;
  inline ::google::protobuf::int32 enconditon() const;
  inline void set_enconditon(::google::protobuf::int32 value);

  // optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
  inline bool has_pkgquerycondition() const;
  inline void clear_pkgquerycondition();
  static const int kPkgqueryconditionFieldNumber = 3;
  inline const ::xkcrm::PkgQueryCondition& pkgquerycondition() const;
  inline ::xkcrm::PkgQueryCondition* mutable_pkgquerycondition();
  inline ::xkcrm::PkgQueryCondition* release_pkgquerycondition();
  inline void set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition);

  // optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
  inline bool has_pageflag() const;
  inline void clear_pageflag();
  static const int kPageflagFieldNumber = 4;
  inline ::xkcrm::EnPageFlag pageflag() const;
  inline void set_pageflag(::xkcrm::EnPageFlag value);

  // optional int32 indexstart = 5;
  inline bool has_indexstart() const;
  inline void clear_indexstart();
  static const int kIndexstartFieldNumber = 5;
  inline ::google::protobuf::int32 indexstart() const;
  inline void set_indexstart(::google::protobuf::int32 value);

  // optional int32 indexend = 6;
  inline bool has_indexend() const;
  inline void clear_indexend();
  static const int kIndexendFieldNumber = 6;
  inline ::google::protobuf::int32 indexend() const;
  inline void set_indexend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryPartnerReq)
 private:
  inline void set_has_enconditon();
  inline void clear_has_enconditon();
  inline void set_has_pkgquerycondition();
  inline void clear_has_pkgquerycondition();
  inline void set_has_pageflag();
  inline void clear_has_pageflag();
  inline void set_has_indexstart();
  inline void clear_has_indexstart();
  inline void set_has_indexend();
  inline void clear_has_indexend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::PkgQueryCondition* pkgquerycondition_;
  ::google::protobuf::int32 enconditon_;
  int pageflag_;
  ::google::protobuf::int32 indexstart_;
  ::google::protobuf::int32 indexend_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryPartnerReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryPartnerReply : public ::google::protobuf::Message {
 public:
  PkgPageQueryPartnerReply();
  virtual ~PkgPageQueryPartnerReply();

  PkgPageQueryPartnerReply(const PkgPageQueryPartnerReply& from);

  inline PkgPageQueryPartnerReply& operator=(const PkgPageQueryPartnerReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryPartnerReply& default_instance();

  void Swap(PkgPageQueryPartnerReply* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryPartnerReply* New() const { return New(NULL); }

  PkgPageQueryPartnerReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryPartnerReply& from);
  void MergeFrom(const PkgPageQueryPartnerReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryPartnerReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // repeated .xkcrm.db_res_partner rows = 10;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 10;
  inline const ::xkcrm::db_res_partner& rows(int index) const;
  inline ::xkcrm::db_res_partner* mutable_rows(int index);
  inline ::xkcrm::db_res_partner* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_res_partner >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_res_partner >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryPartnerReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::RepeatedPtrField< ::xkcrm::db_res_partner > rows_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryPartnerReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryLeadReq : public ::google::protobuf::Message {
 public:
  PkgPageQueryLeadReq();
  virtual ~PkgPageQueryLeadReq();

  PkgPageQueryLeadReq(const PkgPageQueryLeadReq& from);

  inline PkgPageQueryLeadReq& operator=(const PkgPageQueryLeadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryLeadReq& default_instance();

  void Swap(PkgPageQueryLeadReq* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryLeadReq* New() const { return New(NULL); }

  PkgPageQueryLeadReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryLeadReq& from);
  void MergeFrom(const PkgPageQueryLeadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryLeadReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enconditon = 2 [default = 0];
  inline bool has_enconditon() const;
  inline void clear_enconditon();
  static const int kEnconditonFieldNumber = 2;
  inline ::google::protobuf::int32 enconditon() const;
  inline void set_enconditon(::google::protobuf::int32 value);

  // optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
  inline bool has_pkgquerycondition() const;
  inline void clear_pkgquerycondition();
  static const int kPkgqueryconditionFieldNumber = 3;
  inline const ::xkcrm::PkgQueryCondition& pkgquerycondition() const;
  inline ::xkcrm::PkgQueryCondition* mutable_pkgquerycondition();
  inline ::xkcrm::PkgQueryCondition* release_pkgquerycondition();
  inline void set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition);

  // optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
  inline bool has_pageflag() const;
  inline void clear_pageflag();
  static const int kPageflagFieldNumber = 4;
  inline ::xkcrm::EnPageFlag pageflag() const;
  inline void set_pageflag(::xkcrm::EnPageFlag value);

  // optional int32 indexstart = 5;
  inline bool has_indexstart() const;
  inline void clear_indexstart();
  static const int kIndexstartFieldNumber = 5;
  inline ::google::protobuf::int32 indexstart() const;
  inline void set_indexstart(::google::protobuf::int32 value);

  // optional int32 indexend = 6;
  inline bool has_indexend() const;
  inline void clear_indexend();
  static const int kIndexendFieldNumber = 6;
  inline ::google::protobuf::int32 indexend() const;
  inline void set_indexend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryLeadReq)
 private:
  inline void set_has_enconditon();
  inline void clear_has_enconditon();
  inline void set_has_pkgquerycondition();
  inline void clear_has_pkgquerycondition();
  inline void set_has_pageflag();
  inline void clear_has_pageflag();
  inline void set_has_indexstart();
  inline void clear_has_indexstart();
  inline void set_has_indexend();
  inline void clear_has_indexend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::PkgQueryCondition* pkgquerycondition_;
  ::google::protobuf::int32 enconditon_;
  int pageflag_;
  ::google::protobuf::int32 indexstart_;
  ::google::protobuf::int32 indexend_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryLeadReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryLeadReply : public ::google::protobuf::Message {
 public:
  PkgPageQueryLeadReply();
  virtual ~PkgPageQueryLeadReply();

  PkgPageQueryLeadReply(const PkgPageQueryLeadReply& from);

  inline PkgPageQueryLeadReply& operator=(const PkgPageQueryLeadReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryLeadReply& default_instance();

  void Swap(PkgPageQueryLeadReply* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryLeadReply* New() const { return New(NULL); }

  PkgPageQueryLeadReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryLeadReply& from);
  void MergeFrom(const PkgPageQueryLeadReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryLeadReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // repeated .xkcrm.db_crm_lead rows = 10;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 10;
  inline const ::xkcrm::db_crm_lead& rows(int index) const;
  inline ::xkcrm::db_crm_lead* mutable_rows(int index);
  inline ::xkcrm::db_crm_lead* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_lead >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_lead >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryLeadReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_lead > rows_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryLeadReply* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryPhonecallReq : public ::google::protobuf::Message {
 public:
  PkgPageQueryPhonecallReq();
  virtual ~PkgPageQueryPhonecallReq();

  PkgPageQueryPhonecallReq(const PkgPageQueryPhonecallReq& from);

  inline PkgPageQueryPhonecallReq& operator=(const PkgPageQueryPhonecallReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryPhonecallReq& default_instance();

  void Swap(PkgPageQueryPhonecallReq* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryPhonecallReq* New() const { return New(NULL); }

  PkgPageQueryPhonecallReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryPhonecallReq& from);
  void MergeFrom(const PkgPageQueryPhonecallReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryPhonecallReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enconditon = 2 [default = 0];
  inline bool has_enconditon() const;
  inline void clear_enconditon();
  static const int kEnconditonFieldNumber = 2;
  inline ::google::protobuf::int32 enconditon() const;
  inline void set_enconditon(::google::protobuf::int32 value);

  // optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
  inline bool has_pkgquerycondition() const;
  inline void clear_pkgquerycondition();
  static const int kPkgqueryconditionFieldNumber = 3;
  inline const ::xkcrm::PkgQueryCondition& pkgquerycondition() const;
  inline ::xkcrm::PkgQueryCondition* mutable_pkgquerycondition();
  inline ::xkcrm::PkgQueryCondition* release_pkgquerycondition();
  inline void set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition);

  // optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
  inline bool has_pageflag() const;
  inline void clear_pageflag();
  static const int kPageflagFieldNumber = 4;
  inline ::xkcrm::EnPageFlag pageflag() const;
  inline void set_pageflag(::xkcrm::EnPageFlag value);

  // optional int32 indexstart = 5;
  inline bool has_indexstart() const;
  inline void clear_indexstart();
  static const int kIndexstartFieldNumber = 5;
  inline ::google::protobuf::int32 indexstart() const;
  inline void set_indexstart(::google::protobuf::int32 value);

  // optional int32 indexend = 6;
  inline bool has_indexend() const;
  inline void clear_indexend();
  static const int kIndexendFieldNumber = 6;
  inline ::google::protobuf::int32 indexend() const;
  inline void set_indexend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryPhonecallReq)
 private:
  inline void set_has_enconditon();
  inline void clear_has_enconditon();
  inline void set_has_pkgquerycondition();
  inline void clear_has_pkgquerycondition();
  inline void set_has_pageflag();
  inline void clear_has_pageflag();
  inline void set_has_indexstart();
  inline void clear_has_indexstart();
  inline void set_has_indexend();
  inline void clear_has_indexend();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xkcrm::PkgQueryCondition* pkgquerycondition_;
  ::google::protobuf::int32 enconditon_;
  int pageflag_;
  ::google::protobuf::int32 indexstart_;
  ::google::protobuf::int32 indexend_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryPhonecallReq* default_instance_;
};
// -------------------------------------------------------------------

class PkgPageQueryPhonecallReply : public ::google::protobuf::Message {
 public:
  PkgPageQueryPhonecallReply();
  virtual ~PkgPageQueryPhonecallReply();

  PkgPageQueryPhonecallReply(const PkgPageQueryPhonecallReply& from);

  inline PkgPageQueryPhonecallReply& operator=(const PkgPageQueryPhonecallReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgPageQueryPhonecallReply& default_instance();

  void Swap(PkgPageQueryPhonecallReply* other);

  // implements Message ----------------------------------------------

  inline PkgPageQueryPhonecallReply* New() const { return New(NULL); }

  PkgPageQueryPhonecallReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgPageQueryPhonecallReply& from);
  void MergeFrom(const PkgPageQueryPhonecallReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgPageQueryPhonecallReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool issuccess = 1;
  inline bool has_issuccess() const;
  inline void clear_issuccess();
  static const int kIssuccessFieldNumber = 1;
  inline bool issuccess() const;
  inline void set_issuccess(bool value);

  // optional string err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::std::string& err() const;
  inline void set_err(const ::std::string& value);
  inline void set_err(const char* value);
  inline void set_err(const char* value, size_t size);
  inline ::std::string* mutable_err();
  inline ::std::string* release_err();
  inline void set_allocated_err(::std::string* err);

  // repeated .xkcrm.db_crm_phonecall rows = 10;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 10;
  inline const ::xkcrm::db_crm_phonecall& rows(int index) const;
  inline ::xkcrm::db_crm_phonecall* mutable_rows(int index);
  inline ::xkcrm::db_crm_phonecall* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_phonecall >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_phonecall >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:xkcrm.PkgPageQueryPhonecallReply)
 private:
  inline void set_has_issuccess();
  inline void clear_has_issuccess();
  inline void set_has_err();
  inline void clear_has_err();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_;
  ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_phonecall > rows_;
  bool issuccess_;
  friend void  protobuf_AddDesc_xkcrm_2eproto();
  friend void protobuf_AssignDesc_xkcrm_2eproto();
  friend void protobuf_ShutdownFile_xkcrm_2eproto();

  void InitAsDefaultInstance();
  static PkgPageQueryPhonecallReply* default_instance_;
};
// ===================================================================


// ===================================================================

// PkgUserLoginReq

// required .xkcrm.EnGetType gettype = 1 [default = GT_PHONE];
inline bool PkgUserLoginReq::has_gettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgUserLoginReq::set_has_gettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgUserLoginReq::clear_has_gettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgUserLoginReq::clear_gettype() {
  gettype_ = 0;
  clear_has_gettype();
}
inline ::xkcrm::EnGetType PkgUserLoginReq::gettype() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.gettype)
  return static_cast< ::xkcrm::EnGetType >(gettype_);
}
inline void PkgUserLoginReq::set_gettype(::xkcrm::EnGetType value) {
  assert(::xkcrm::EnGetType_IsValid(value));
  set_has_gettype();
  gettype_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.gettype)
}

// optional int32 userid = 2;
inline bool PkgUserLoginReq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgUserLoginReq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgUserLoginReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgUserLoginReq::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PkgUserLoginReq::userid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.userid)
  return userid_;
}
inline void PkgUserLoginReq::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.userid)
}

// optional string phonenumber = 3;
inline bool PkgUserLoginReq::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgUserLoginReq::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgUserLoginReq::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgUserLoginReq::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenumber();
}
inline const ::std::string& PkgUserLoginReq::phonenumber() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.phonenumber)
  return phonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.phonenumber)
}
inline void PkgUserLoginReq::set_phonenumber(const char* value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReq.phonenumber)
}
inline void PkgUserLoginReq::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReq.phonenumber)
}
inline ::std::string* PkgUserLoginReq::mutable_phonenumber() {
  set_has_phonenumber();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReq.phonenumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_phonenumber() {
  clear_has_phonenumber();
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    set_has_phonenumber();
  } else {
    clear_has_phonenumber();
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReq.phonenumber)
}

// optional string emailaddress = 4;
inline bool PkgUserLoginReq::has_emailaddress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgUserLoginReq::set_has_emailaddress() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgUserLoginReq::clear_has_emailaddress() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgUserLoginReq::clear_emailaddress() {
  emailaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emailaddress();
}
inline const ::std::string& PkgUserLoginReq::emailaddress() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.emailaddress)
  return emailaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_emailaddress(const ::std::string& value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.emailaddress)
}
inline void PkgUserLoginReq::set_emailaddress(const char* value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReq.emailaddress)
}
inline void PkgUserLoginReq::set_emailaddress(const char* value, size_t size) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReq.emailaddress)
}
inline ::std::string* PkgUserLoginReq::mutable_emailaddress() {
  set_has_emailaddress();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReq.emailaddress)
  return emailaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_emailaddress() {
  clear_has_emailaddress();
  return emailaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_emailaddress(::std::string* emailaddress) {
  if (emailaddress != NULL) {
    set_has_emailaddress();
  } else {
    clear_has_emailaddress();
  }
  emailaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailaddress);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReq.emailaddress)
}

// optional string username = 5;
inline bool PkgUserLoginReq::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgUserLoginReq::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgUserLoginReq::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgUserLoginReq::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& PkgUserLoginReq::username() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.username)
}
inline void PkgUserLoginReq::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReq.username)
}
inline void PkgUserLoginReq::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReq.username)
}
inline ::std::string* PkgUserLoginReq::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReq.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReq.username)
}

// required string password = 10;
inline bool PkgUserLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PkgUserLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PkgUserLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PkgUserLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& PkgUserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.password)
}
inline void PkgUserLoginReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReq.password)
}
inline void PkgUserLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReq.password)
}
inline ::std::string* PkgUserLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReq.password)
}

// optional string hashedserversn = 100;
inline bool PkgUserLoginReq::has_hashedserversn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PkgUserLoginReq::set_has_hashedserversn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PkgUserLoginReq::clear_has_hashedserversn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PkgUserLoginReq::clear_hashedserversn() {
  hashedserversn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashedserversn();
}
inline const ::std::string& PkgUserLoginReq::hashedserversn() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReq.hashedserversn)
  return hashedserversn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_hashedserversn(const ::std::string& value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReq.hashedserversn)
}
inline void PkgUserLoginReq::set_hashedserversn(const char* value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReq.hashedserversn)
}
inline void PkgUserLoginReq::set_hashedserversn(const char* value, size_t size) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReq.hashedserversn)
}
inline ::std::string* PkgUserLoginReq::mutable_hashedserversn() {
  set_has_hashedserversn();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReq.hashedserversn)
  return hashedserversn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReq::release_hashedserversn() {
  clear_has_hashedserversn();
  return hashedserversn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReq::set_allocated_hashedserversn(::std::string* hashedserversn) {
  if (hashedserversn != NULL) {
    set_has_hashedserversn();
  } else {
    clear_has_hashedserversn();
  }
  hashedserversn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashedserversn);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReq.hashedserversn)
}

// -------------------------------------------------------------------

// PkgUserLoginReply

// required bool issuccess = 1 [default = true];
inline bool PkgUserLoginReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgUserLoginReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgUserLoginReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgUserLoginReply::clear_issuccess() {
  issuccess_ = true;
  clear_has_issuccess();
}
inline bool PkgUserLoginReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReply.issuccess)
  return issuccess_;
}
inline void PkgUserLoginReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReply.issuccess)
}

// optional string err = 2;
inline bool PkgUserLoginReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgUserLoginReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgUserLoginReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgUserLoginReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgUserLoginReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgUserLoginReply.err)
}
inline void PkgUserLoginReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgUserLoginReply.err)
}
inline void PkgUserLoginReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgUserLoginReply.err)
}
inline ::std::string* PkgUserLoginReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUserLoginReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUserLoginReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReply.err)
}

// optional .xkcrm.db_res_users userinfo = 11;
inline bool PkgUserLoginReply::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgUserLoginReply::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgUserLoginReply::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgUserLoginReply::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::xkcrm::db_res_users::Clear();
  clear_has_userinfo();
}
inline const ::xkcrm::db_res_users& PkgUserLoginReply::userinfo() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReply.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::xkcrm::db_res_users* PkgUserLoginReply::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) {
    userinfo_ = new ::xkcrm::db_res_users;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReply.userinfo)
  return userinfo_;
}
inline ::xkcrm::db_res_users* PkgUserLoginReply::release_userinfo() {
  clear_has_userinfo();
  ::xkcrm::db_res_users* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void PkgUserLoginReply::set_allocated_userinfo(::xkcrm::db_res_users* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReply.userinfo)
}

// optional .xkcrm.db_res_company companyinfo = 12;
inline bool PkgUserLoginReply::has_companyinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgUserLoginReply::set_has_companyinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgUserLoginReply::clear_has_companyinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgUserLoginReply::clear_companyinfo() {
  if (companyinfo_ != NULL) companyinfo_->::xkcrm::db_res_company::Clear();
  clear_has_companyinfo();
}
inline const ::xkcrm::db_res_company& PkgUserLoginReply::companyinfo() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgUserLoginReply.companyinfo)
  return companyinfo_ != NULL ? *companyinfo_ : *default_instance_->companyinfo_;
}
inline ::xkcrm::db_res_company* PkgUserLoginReply::mutable_companyinfo() {
  set_has_companyinfo();
  if (companyinfo_ == NULL) {
    companyinfo_ = new ::xkcrm::db_res_company;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgUserLoginReply.companyinfo)
  return companyinfo_;
}
inline ::xkcrm::db_res_company* PkgUserLoginReply::release_companyinfo() {
  clear_has_companyinfo();
  ::xkcrm::db_res_company* temp = companyinfo_;
  companyinfo_ = NULL;
  return temp;
}
inline void PkgUserLoginReply::set_allocated_companyinfo(::xkcrm::db_res_company* companyinfo) {
  delete companyinfo_;
  companyinfo_ = companyinfo;
  if (companyinfo) {
    set_has_companyinfo();
  } else {
    clear_has_companyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgUserLoginReply.companyinfo)
}

// -------------------------------------------------------------------

// PkgOptPartnerReq

// required .xkcrm.EnOperation opt = 1;
inline bool PkgOptPartnerReq::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptPartnerReq::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptPartnerReq::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptPartnerReq::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::xkcrm::EnOperation PkgOptPartnerReq::opt() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPartnerReq.opt)
  return static_cast< ::xkcrm::EnOperation >(opt_);
}
inline void PkgOptPartnerReq::set_opt(::xkcrm::EnOperation value) {
  assert(::xkcrm::EnOperation_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPartnerReq.opt)
}

// optional .xkcrm.db_res_partner partner = 2;
inline bool PkgOptPartnerReq::has_partner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptPartnerReq::set_has_partner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptPartnerReq::clear_has_partner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptPartnerReq::clear_partner() {
  if (partner_ != NULL) partner_->::xkcrm::db_res_partner::Clear();
  clear_has_partner();
}
inline const ::xkcrm::db_res_partner& PkgOptPartnerReq::partner() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPartnerReq.partner)
  return partner_ != NULL ? *partner_ : *default_instance_->partner_;
}
inline ::xkcrm::db_res_partner* PkgOptPartnerReq::mutable_partner() {
  set_has_partner();
  if (partner_ == NULL) {
    partner_ = new ::xkcrm::db_res_partner;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPartnerReq.partner)
  return partner_;
}
inline ::xkcrm::db_res_partner* PkgOptPartnerReq::release_partner() {
  clear_has_partner();
  ::xkcrm::db_res_partner* temp = partner_;
  partner_ = NULL;
  return temp;
}
inline void PkgOptPartnerReq::set_allocated_partner(::xkcrm::db_res_partner* partner) {
  delete partner_;
  partner_ = partner;
  if (partner) {
    set_has_partner();
  } else {
    clear_has_partner();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPartnerReq.partner)
}

// optional string uuidpartner = 3;
inline bool PkgOptPartnerReq::has_uuidpartner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgOptPartnerReq::set_has_uuidpartner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgOptPartnerReq::clear_has_uuidpartner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgOptPartnerReq::clear_uuidpartner() {
  uuidpartner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidpartner();
}
inline const ::std::string& PkgOptPartnerReq::uuidpartner() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPartnerReq.uuidpartner)
  return uuidpartner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPartnerReq::set_uuidpartner(const ::std::string& value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPartnerReq.uuidpartner)
}
inline void PkgOptPartnerReq::set_uuidpartner(const char* value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptPartnerReq.uuidpartner)
}
inline void PkgOptPartnerReq::set_uuidpartner(const char* value, size_t size) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptPartnerReq.uuidpartner)
}
inline ::std::string* PkgOptPartnerReq::mutable_uuidpartner() {
  set_has_uuidpartner();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPartnerReq.uuidpartner)
  return uuidpartner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptPartnerReq::release_uuidpartner() {
  clear_has_uuidpartner();
  return uuidpartner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPartnerReq::set_allocated_uuidpartner(::std::string* uuidpartner) {
  if (uuidpartner != NULL) {
    set_has_uuidpartner();
  } else {
    clear_has_uuidpartner();
  }
  uuidpartner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidpartner);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPartnerReq.uuidpartner)
}

// -------------------------------------------------------------------

// PkgOptPartnerReply

// required bool issuccess = 1;
inline bool PkgOptPartnerReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptPartnerReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptPartnerReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptPartnerReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgOptPartnerReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPartnerReply.issuccess)
  return issuccess_;
}
inline void PkgOptPartnerReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPartnerReply.issuccess)
}

// optional string err = 2;
inline bool PkgOptPartnerReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptPartnerReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptPartnerReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptPartnerReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgOptPartnerReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPartnerReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPartnerReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPartnerReply.err)
}
inline void PkgOptPartnerReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptPartnerReply.err)
}
inline void PkgOptPartnerReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptPartnerReply.err)
}
inline ::std::string* PkgOptPartnerReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPartnerReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptPartnerReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPartnerReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPartnerReply.err)
}

// -------------------------------------------------------------------

// PkgOptLeadReq

// required .xkcrm.EnOperation opt = 1;
inline bool PkgOptLeadReq::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptLeadReq::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptLeadReq::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptLeadReq::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::xkcrm::EnOperation PkgOptLeadReq::opt() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptLeadReq.opt)
  return static_cast< ::xkcrm::EnOperation >(opt_);
}
inline void PkgOptLeadReq::set_opt(::xkcrm::EnOperation value) {
  assert(::xkcrm::EnOperation_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptLeadReq.opt)
}

// optional .xkcrm.db_crm_lead lead = 2;
inline bool PkgOptLeadReq::has_lead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptLeadReq::set_has_lead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptLeadReq::clear_has_lead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptLeadReq::clear_lead() {
  if (lead_ != NULL) lead_->::xkcrm::db_crm_lead::Clear();
  clear_has_lead();
}
inline const ::xkcrm::db_crm_lead& PkgOptLeadReq::lead() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptLeadReq.lead)
  return lead_ != NULL ? *lead_ : *default_instance_->lead_;
}
inline ::xkcrm::db_crm_lead* PkgOptLeadReq::mutable_lead() {
  set_has_lead();
  if (lead_ == NULL) {
    lead_ = new ::xkcrm::db_crm_lead;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptLeadReq.lead)
  return lead_;
}
inline ::xkcrm::db_crm_lead* PkgOptLeadReq::release_lead() {
  clear_has_lead();
  ::xkcrm::db_crm_lead* temp = lead_;
  lead_ = NULL;
  return temp;
}
inline void PkgOptLeadReq::set_allocated_lead(::xkcrm::db_crm_lead* lead) {
  delete lead_;
  lead_ = lead;
  if (lead) {
    set_has_lead();
  } else {
    clear_has_lead();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptLeadReq.lead)
}

// optional string uuidleadid = 3;
inline bool PkgOptLeadReq::has_uuidleadid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgOptLeadReq::set_has_uuidleadid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgOptLeadReq::clear_has_uuidleadid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgOptLeadReq::clear_uuidleadid() {
  uuidleadid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidleadid();
}
inline const ::std::string& PkgOptLeadReq::uuidleadid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptLeadReq.uuidleadid)
  return uuidleadid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptLeadReq::set_uuidleadid(const ::std::string& value) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptLeadReq.uuidleadid)
}
inline void PkgOptLeadReq::set_uuidleadid(const char* value) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptLeadReq.uuidleadid)
}
inline void PkgOptLeadReq::set_uuidleadid(const char* value, size_t size) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptLeadReq.uuidleadid)
}
inline ::std::string* PkgOptLeadReq::mutable_uuidleadid() {
  set_has_uuidleadid();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptLeadReq.uuidleadid)
  return uuidleadid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptLeadReq::release_uuidleadid() {
  clear_has_uuidleadid();
  return uuidleadid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptLeadReq::set_allocated_uuidleadid(::std::string* uuidleadid) {
  if (uuidleadid != NULL) {
    set_has_uuidleadid();
  } else {
    clear_has_uuidleadid();
  }
  uuidleadid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidleadid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptLeadReq.uuidleadid)
}

// -------------------------------------------------------------------

// PkgOptLeadReply

// required bool issuccess = 1;
inline bool PkgOptLeadReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptLeadReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptLeadReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptLeadReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgOptLeadReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptLeadReply.issuccess)
  return issuccess_;
}
inline void PkgOptLeadReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptLeadReply.issuccess)
}

// optional string err = 2;
inline bool PkgOptLeadReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptLeadReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptLeadReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptLeadReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgOptLeadReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptLeadReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptLeadReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptLeadReply.err)
}
inline void PkgOptLeadReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptLeadReply.err)
}
inline void PkgOptLeadReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptLeadReply.err)
}
inline ::std::string* PkgOptLeadReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptLeadReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptLeadReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptLeadReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptLeadReply.err)
}

// -------------------------------------------------------------------

// PkgOptPhonecallReq

// required .xkcrm.EnOperation opt = 1;
inline bool PkgOptPhonecallReq::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptPhonecallReq::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptPhonecallReq::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptPhonecallReq::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::xkcrm::EnOperation PkgOptPhonecallReq::opt() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPhonecallReq.opt)
  return static_cast< ::xkcrm::EnOperation >(opt_);
}
inline void PkgOptPhonecallReq::set_opt(::xkcrm::EnOperation value) {
  assert(::xkcrm::EnOperation_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPhonecallReq.opt)
}

// optional .xkcrm.db_crm_phonecall phonecall = 2;
inline bool PkgOptPhonecallReq::has_phonecall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptPhonecallReq::set_has_phonecall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptPhonecallReq::clear_has_phonecall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptPhonecallReq::clear_phonecall() {
  if (phonecall_ != NULL) phonecall_->::xkcrm::db_crm_phonecall::Clear();
  clear_has_phonecall();
}
inline const ::xkcrm::db_crm_phonecall& PkgOptPhonecallReq::phonecall() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPhonecallReq.phonecall)
  return phonecall_ != NULL ? *phonecall_ : *default_instance_->phonecall_;
}
inline ::xkcrm::db_crm_phonecall* PkgOptPhonecallReq::mutable_phonecall() {
  set_has_phonecall();
  if (phonecall_ == NULL) {
    phonecall_ = new ::xkcrm::db_crm_phonecall;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPhonecallReq.phonecall)
  return phonecall_;
}
inline ::xkcrm::db_crm_phonecall* PkgOptPhonecallReq::release_phonecall() {
  clear_has_phonecall();
  ::xkcrm::db_crm_phonecall* temp = phonecall_;
  phonecall_ = NULL;
  return temp;
}
inline void PkgOptPhonecallReq::set_allocated_phonecall(::xkcrm::db_crm_phonecall* phonecall) {
  delete phonecall_;
  phonecall_ = phonecall;
  if (phonecall) {
    set_has_phonecall();
  } else {
    clear_has_phonecall();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPhonecallReq.phonecall)
}

// optional string uuidphonecallid = 3;
inline bool PkgOptPhonecallReq::has_uuidphonecallid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgOptPhonecallReq::set_has_uuidphonecallid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgOptPhonecallReq::clear_has_uuidphonecallid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgOptPhonecallReq::clear_uuidphonecallid() {
  uuidphonecallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidphonecallid();
}
inline const ::std::string& PkgOptPhonecallReq::uuidphonecallid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
  return uuidphonecallid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPhonecallReq::set_uuidphonecallid(const ::std::string& value) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
}
inline void PkgOptPhonecallReq::set_uuidphonecallid(const char* value) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
}
inline void PkgOptPhonecallReq::set_uuidphonecallid(const char* value, size_t size) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
}
inline ::std::string* PkgOptPhonecallReq::mutable_uuidphonecallid() {
  set_has_uuidphonecallid();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
  return uuidphonecallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptPhonecallReq::release_uuidphonecallid() {
  clear_has_uuidphonecallid();
  return uuidphonecallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPhonecallReq::set_allocated_uuidphonecallid(::std::string* uuidphonecallid) {
  if (uuidphonecallid != NULL) {
    set_has_uuidphonecallid();
  } else {
    clear_has_uuidphonecallid();
  }
  uuidphonecallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidphonecallid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPhonecallReq.uuidphonecallid)
}

// -------------------------------------------------------------------

// PkgOptPhonecallReply

// required bool issuccess = 1;
inline bool PkgOptPhonecallReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgOptPhonecallReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgOptPhonecallReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgOptPhonecallReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgOptPhonecallReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPhonecallReply.issuccess)
  return issuccess_;
}
inline void PkgOptPhonecallReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPhonecallReply.issuccess)
}

// optional string err = 2;
inline bool PkgOptPhonecallReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgOptPhonecallReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgOptPhonecallReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgOptPhonecallReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgOptPhonecallReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgOptPhonecallReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPhonecallReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgOptPhonecallReply.err)
}
inline void PkgOptPhonecallReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgOptPhonecallReply.err)
}
inline void PkgOptPhonecallReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgOptPhonecallReply.err)
}
inline ::std::string* PkgOptPhonecallReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgOptPhonecallReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgOptPhonecallReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgOptPhonecallReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgOptPhonecallReply.err)
}

// -------------------------------------------------------------------

// PkgQueryCondition

// optional string taskdatestart = 2;
inline bool PkgQueryCondition::has_taskdatestart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgQueryCondition::set_has_taskdatestart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgQueryCondition::clear_has_taskdatestart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgQueryCondition::clear_taskdatestart() {
  taskdatestart_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskdatestart();
}
inline const ::std::string& PkgQueryCondition::taskdatestart() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.taskdatestart)
  return taskdatestart_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_taskdatestart(const ::std::string& value) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.taskdatestart)
}
inline void PkgQueryCondition::set_taskdatestart(const char* value) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.taskdatestart)
}
inline void PkgQueryCondition::set_taskdatestart(const char* value, size_t size) {
  set_has_taskdatestart();
  taskdatestart_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.taskdatestart)
}
inline ::std::string* PkgQueryCondition::mutable_taskdatestart() {
  set_has_taskdatestart();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.taskdatestart)
  return taskdatestart_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_taskdatestart() {
  clear_has_taskdatestart();
  return taskdatestart_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_taskdatestart(::std::string* taskdatestart) {
  if (taskdatestart != NULL) {
    set_has_taskdatestart();
  } else {
    clear_has_taskdatestart();
  }
  taskdatestart_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskdatestart);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.taskdatestart)
}

// optional string taskdateend = 3;
inline bool PkgQueryCondition::has_taskdateend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgQueryCondition::set_has_taskdateend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgQueryCondition::clear_has_taskdateend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgQueryCondition::clear_taskdateend() {
  taskdateend_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskdateend();
}
inline const ::std::string& PkgQueryCondition::taskdateend() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.taskdateend)
  return taskdateend_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_taskdateend(const ::std::string& value) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.taskdateend)
}
inline void PkgQueryCondition::set_taskdateend(const char* value) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.taskdateend)
}
inline void PkgQueryCondition::set_taskdateend(const char* value, size_t size) {
  set_has_taskdateend();
  taskdateend_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.taskdateend)
}
inline ::std::string* PkgQueryCondition::mutable_taskdateend() {
  set_has_taskdateend();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.taskdateend)
  return taskdateend_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_taskdateend() {
  clear_has_taskdateend();
  return taskdateend_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_taskdateend(::std::string* taskdateend) {
  if (taskdateend != NULL) {
    set_has_taskdateend();
  } else {
    clear_has_taskdateend();
  }
  taskdateend_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskdateend);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.taskdateend)
}

// optional string keyforname = 4;
inline bool PkgQueryCondition::has_keyforname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgQueryCondition::set_has_keyforname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgQueryCondition::clear_has_keyforname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgQueryCondition::clear_keyforname() {
  keyforname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyforname();
}
inline const ::std::string& PkgQueryCondition::keyforname() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.keyforname)
  return keyforname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_keyforname(const ::std::string& value) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.keyforname)
}
inline void PkgQueryCondition::set_keyforname(const char* value) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.keyforname)
}
inline void PkgQueryCondition::set_keyforname(const char* value, size_t size) {
  set_has_keyforname();
  keyforname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.keyforname)
}
inline ::std::string* PkgQueryCondition::mutable_keyforname() {
  set_has_keyforname();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.keyforname)
  return keyforname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_keyforname() {
  clear_has_keyforname();
  return keyforname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_keyforname(::std::string* keyforname) {
  if (keyforname != NULL) {
    set_has_keyforname();
  } else {
    clear_has_keyforname();
  }
  keyforname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyforname);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.keyforname)
}

// optional string keyforcontent = 5;
inline bool PkgQueryCondition::has_keyforcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgQueryCondition::set_has_keyforcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgQueryCondition::clear_has_keyforcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgQueryCondition::clear_keyforcontent() {
  keyforcontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyforcontent();
}
inline const ::std::string& PkgQueryCondition::keyforcontent() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.keyforcontent)
  return keyforcontent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_keyforcontent(const ::std::string& value) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.keyforcontent)
}
inline void PkgQueryCondition::set_keyforcontent(const char* value) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.keyforcontent)
}
inline void PkgQueryCondition::set_keyforcontent(const char* value, size_t size) {
  set_has_keyforcontent();
  keyforcontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.keyforcontent)
}
inline ::std::string* PkgQueryCondition::mutable_keyforcontent() {
  set_has_keyforcontent();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.keyforcontent)
  return keyforcontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_keyforcontent() {
  clear_has_keyforcontent();
  return keyforcontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_keyforcontent(::std::string* keyforcontent) {
  if (keyforcontent != NULL) {
    set_has_keyforcontent();
  } else {
    clear_has_keyforcontent();
  }
  keyforcontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyforcontent);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.keyforcontent)
}

// optional string partneruuid = 10;
inline bool PkgQueryCondition::has_partneruuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgQueryCondition::set_has_partneruuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgQueryCondition::clear_has_partneruuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgQueryCondition::clear_partneruuid() {
  partneruuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partneruuid();
}
inline const ::std::string& PkgQueryCondition::partneruuid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.partneruuid)
  return partneruuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_partneruuid(const ::std::string& value) {
  set_has_partneruuid();
  partneruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.partneruuid)
}
inline void PkgQueryCondition::set_partneruuid(const char* value) {
  set_has_partneruuid();
  partneruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.partneruuid)
}
inline void PkgQueryCondition::set_partneruuid(const char* value, size_t size) {
  set_has_partneruuid();
  partneruuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.partneruuid)
}
inline ::std::string* PkgQueryCondition::mutable_partneruuid() {
  set_has_partneruuid();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.partneruuid)
  return partneruuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_partneruuid() {
  clear_has_partneruuid();
  return partneruuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_partneruuid(::std::string* partneruuid) {
  if (partneruuid != NULL) {
    set_has_partneruuid();
  } else {
    clear_has_partneruuid();
  }
  partneruuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partneruuid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.partneruuid)
}

// optional string leaduuid = 11;
inline bool PkgQueryCondition::has_leaduuid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PkgQueryCondition::set_has_leaduuid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PkgQueryCondition::clear_has_leaduuid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PkgQueryCondition::clear_leaduuid() {
  leaduuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leaduuid();
}
inline const ::std::string& PkgQueryCondition::leaduuid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.leaduuid)
  return leaduuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_leaduuid(const ::std::string& value) {
  set_has_leaduuid();
  leaduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.leaduuid)
}
inline void PkgQueryCondition::set_leaduuid(const char* value) {
  set_has_leaduuid();
  leaduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.leaduuid)
}
inline void PkgQueryCondition::set_leaduuid(const char* value, size_t size) {
  set_has_leaduuid();
  leaduuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.leaduuid)
}
inline ::std::string* PkgQueryCondition::mutable_leaduuid() {
  set_has_leaduuid();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.leaduuid)
  return leaduuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_leaduuid() {
  clear_has_leaduuid();
  return leaduuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_leaduuid(::std::string* leaduuid) {
  if (leaduuid != NULL) {
    set_has_leaduuid();
  } else {
    clear_has_leaduuid();
  }
  leaduuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaduuid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.leaduuid)
}

// optional string selfuuid = 100;
inline bool PkgQueryCondition::has_selfuuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PkgQueryCondition::set_has_selfuuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PkgQueryCondition::clear_has_selfuuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PkgQueryCondition::clear_selfuuid() {
  selfuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_selfuuid();
}
inline const ::std::string& PkgQueryCondition::selfuuid() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgQueryCondition.selfuuid)
  return selfuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_selfuuid(const ::std::string& value) {
  set_has_selfuuid();
  selfuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgQueryCondition.selfuuid)
}
inline void PkgQueryCondition::set_selfuuid(const char* value) {
  set_has_selfuuid();
  selfuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgQueryCondition.selfuuid)
}
inline void PkgQueryCondition::set_selfuuid(const char* value, size_t size) {
  set_has_selfuuid();
  selfuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgQueryCondition.selfuuid)
}
inline ::std::string* PkgQueryCondition::mutable_selfuuid() {
  set_has_selfuuid();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgQueryCondition.selfuuid)
  return selfuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgQueryCondition::release_selfuuid() {
  clear_has_selfuuid();
  return selfuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgQueryCondition::set_allocated_selfuuid(::std::string* selfuuid) {
  if (selfuuid != NULL) {
    set_has_selfuuid();
  } else {
    clear_has_selfuuid();
  }
  selfuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selfuuid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgQueryCondition.selfuuid)
}

// -------------------------------------------------------------------

// PkgPageQueryPartnerReq

// optional int32 enconditon = 2 [default = 0];
inline bool PkgPageQueryPartnerReq::has_enconditon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryPartnerReq::set_has_enconditon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryPartnerReq::clear_has_enconditon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryPartnerReq::clear_enconditon() {
  enconditon_ = 0;
  clear_has_enconditon();
}
inline ::google::protobuf::int32 PkgPageQueryPartnerReq::enconditon() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReq.enconditon)
  return enconditon_;
}
inline void PkgPageQueryPartnerReq::set_enconditon(::google::protobuf::int32 value) {
  set_has_enconditon();
  enconditon_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReq.enconditon)
}

// optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
inline bool PkgPageQueryPartnerReq::has_pkgquerycondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryPartnerReq::set_has_pkgquerycondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryPartnerReq::clear_has_pkgquerycondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryPartnerReq::clear_pkgquerycondition() {
  if (pkgquerycondition_ != NULL) pkgquerycondition_->::xkcrm::PkgQueryCondition::Clear();
  clear_has_pkgquerycondition();
}
inline const ::xkcrm::PkgQueryCondition& PkgPageQueryPartnerReq::pkgquerycondition() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReq.pkgquerycondition)
  return pkgquerycondition_ != NULL ? *pkgquerycondition_ : *default_instance_->pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryPartnerReq::mutable_pkgquerycondition() {
  set_has_pkgquerycondition();
  if (pkgquerycondition_ == NULL) {
    pkgquerycondition_ = new ::xkcrm::PkgQueryCondition;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPartnerReq.pkgquerycondition)
  return pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryPartnerReq::release_pkgquerycondition() {
  clear_has_pkgquerycondition();
  ::xkcrm::PkgQueryCondition* temp = pkgquerycondition_;
  pkgquerycondition_ = NULL;
  return temp;
}
inline void PkgPageQueryPartnerReq::set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition) {
  delete pkgquerycondition_;
  pkgquerycondition_ = pkgquerycondition;
  if (pkgquerycondition) {
    set_has_pkgquerycondition();
  } else {
    clear_has_pkgquerycondition();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryPartnerReq.pkgquerycondition)
}

// optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
inline bool PkgPageQueryPartnerReq::has_pageflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgPageQueryPartnerReq::set_has_pageflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgPageQueryPartnerReq::clear_has_pageflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgPageQueryPartnerReq::clear_pageflag() {
  pageflag_ = 2;
  clear_has_pageflag();
}
inline ::xkcrm::EnPageFlag PkgPageQueryPartnerReq::pageflag() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReq.pageflag)
  return static_cast< ::xkcrm::EnPageFlag >(pageflag_);
}
inline void PkgPageQueryPartnerReq::set_pageflag(::xkcrm::EnPageFlag value) {
  assert(::xkcrm::EnPageFlag_IsValid(value));
  set_has_pageflag();
  pageflag_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReq.pageflag)
}

// optional int32 indexstart = 5;
inline bool PkgPageQueryPartnerReq::has_indexstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgPageQueryPartnerReq::set_has_indexstart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgPageQueryPartnerReq::clear_has_indexstart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgPageQueryPartnerReq::clear_indexstart() {
  indexstart_ = 0;
  clear_has_indexstart();
}
inline ::google::protobuf::int32 PkgPageQueryPartnerReq::indexstart() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReq.indexstart)
  return indexstart_;
}
inline void PkgPageQueryPartnerReq::set_indexstart(::google::protobuf::int32 value) {
  set_has_indexstart();
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReq.indexstart)
}

// optional int32 indexend = 6;
inline bool PkgPageQueryPartnerReq::has_indexend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgPageQueryPartnerReq::set_has_indexend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgPageQueryPartnerReq::clear_has_indexend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgPageQueryPartnerReq::clear_indexend() {
  indexend_ = 0;
  clear_has_indexend();
}
inline ::google::protobuf::int32 PkgPageQueryPartnerReq::indexend() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReq.indexend)
  return indexend_;
}
inline void PkgPageQueryPartnerReq::set_indexend(::google::protobuf::int32 value) {
  set_has_indexend();
  indexend_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReq.indexend)
}

// -------------------------------------------------------------------

// PkgPageQueryPartnerReply

// required bool issuccess = 1;
inline bool PkgPageQueryPartnerReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryPartnerReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryPartnerReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryPartnerReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgPageQueryPartnerReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReply.issuccess)
  return issuccess_;
}
inline void PkgPageQueryPartnerReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReply.issuccess)
}

// optional string err = 2;
inline bool PkgPageQueryPartnerReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryPartnerReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryPartnerReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryPartnerReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgPageQueryPartnerReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryPartnerReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPartnerReply.err)
}
inline void PkgPageQueryPartnerReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgPageQueryPartnerReply.err)
}
inline void PkgPageQueryPartnerReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgPageQueryPartnerReply.err)
}
inline ::std::string* PkgPageQueryPartnerReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPartnerReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgPageQueryPartnerReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryPartnerReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryPartnerReply.err)
}

// repeated .xkcrm.db_res_partner rows = 10;
inline int PkgPageQueryPartnerReply::rows_size() const {
  return rows_.size();
}
inline void PkgPageQueryPartnerReply::clear_rows() {
  rows_.Clear();
}
inline const ::xkcrm::db_res_partner& PkgPageQueryPartnerReply::rows(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPartnerReply.rows)
  return rows_.Get(index);
}
inline ::xkcrm::db_res_partner* PkgPageQueryPartnerReply::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPartnerReply.rows)
  return rows_.Mutable(index);
}
inline ::xkcrm::db_res_partner* PkgPageQueryPartnerReply::add_rows() {
  // @@protoc_insertion_point(field_add:xkcrm.PkgPageQueryPartnerReply.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_res_partner >&
PkgPageQueryPartnerReply::rows() const {
  // @@protoc_insertion_point(field_list:xkcrm.PkgPageQueryPartnerReply.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_res_partner >*
PkgPageQueryPartnerReply::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.PkgPageQueryPartnerReply.rows)
  return &rows_;
}

// -------------------------------------------------------------------

// PkgPageQueryLeadReq

// optional int32 enconditon = 2 [default = 0];
inline bool PkgPageQueryLeadReq::has_enconditon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryLeadReq::set_has_enconditon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryLeadReq::clear_has_enconditon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryLeadReq::clear_enconditon() {
  enconditon_ = 0;
  clear_has_enconditon();
}
inline ::google::protobuf::int32 PkgPageQueryLeadReq::enconditon() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReq.enconditon)
  return enconditon_;
}
inline void PkgPageQueryLeadReq::set_enconditon(::google::protobuf::int32 value) {
  set_has_enconditon();
  enconditon_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReq.enconditon)
}

// optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
inline bool PkgPageQueryLeadReq::has_pkgquerycondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryLeadReq::set_has_pkgquerycondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryLeadReq::clear_has_pkgquerycondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryLeadReq::clear_pkgquerycondition() {
  if (pkgquerycondition_ != NULL) pkgquerycondition_->::xkcrm::PkgQueryCondition::Clear();
  clear_has_pkgquerycondition();
}
inline const ::xkcrm::PkgQueryCondition& PkgPageQueryLeadReq::pkgquerycondition() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReq.pkgquerycondition)
  return pkgquerycondition_ != NULL ? *pkgquerycondition_ : *default_instance_->pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryLeadReq::mutable_pkgquerycondition() {
  set_has_pkgquerycondition();
  if (pkgquerycondition_ == NULL) {
    pkgquerycondition_ = new ::xkcrm::PkgQueryCondition;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryLeadReq.pkgquerycondition)
  return pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryLeadReq::release_pkgquerycondition() {
  clear_has_pkgquerycondition();
  ::xkcrm::PkgQueryCondition* temp = pkgquerycondition_;
  pkgquerycondition_ = NULL;
  return temp;
}
inline void PkgPageQueryLeadReq::set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition) {
  delete pkgquerycondition_;
  pkgquerycondition_ = pkgquerycondition;
  if (pkgquerycondition) {
    set_has_pkgquerycondition();
  } else {
    clear_has_pkgquerycondition();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryLeadReq.pkgquerycondition)
}

// optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
inline bool PkgPageQueryLeadReq::has_pageflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgPageQueryLeadReq::set_has_pageflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgPageQueryLeadReq::clear_has_pageflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgPageQueryLeadReq::clear_pageflag() {
  pageflag_ = 2;
  clear_has_pageflag();
}
inline ::xkcrm::EnPageFlag PkgPageQueryLeadReq::pageflag() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReq.pageflag)
  return static_cast< ::xkcrm::EnPageFlag >(pageflag_);
}
inline void PkgPageQueryLeadReq::set_pageflag(::xkcrm::EnPageFlag value) {
  assert(::xkcrm::EnPageFlag_IsValid(value));
  set_has_pageflag();
  pageflag_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReq.pageflag)
}

// optional int32 indexstart = 5;
inline bool PkgPageQueryLeadReq::has_indexstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgPageQueryLeadReq::set_has_indexstart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgPageQueryLeadReq::clear_has_indexstart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgPageQueryLeadReq::clear_indexstart() {
  indexstart_ = 0;
  clear_has_indexstart();
}
inline ::google::protobuf::int32 PkgPageQueryLeadReq::indexstart() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReq.indexstart)
  return indexstart_;
}
inline void PkgPageQueryLeadReq::set_indexstart(::google::protobuf::int32 value) {
  set_has_indexstart();
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReq.indexstart)
}

// optional int32 indexend = 6;
inline bool PkgPageQueryLeadReq::has_indexend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgPageQueryLeadReq::set_has_indexend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgPageQueryLeadReq::clear_has_indexend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgPageQueryLeadReq::clear_indexend() {
  indexend_ = 0;
  clear_has_indexend();
}
inline ::google::protobuf::int32 PkgPageQueryLeadReq::indexend() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReq.indexend)
  return indexend_;
}
inline void PkgPageQueryLeadReq::set_indexend(::google::protobuf::int32 value) {
  set_has_indexend();
  indexend_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReq.indexend)
}

// -------------------------------------------------------------------

// PkgPageQueryLeadReply

// required bool issuccess = 1;
inline bool PkgPageQueryLeadReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryLeadReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryLeadReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryLeadReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgPageQueryLeadReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReply.issuccess)
  return issuccess_;
}
inline void PkgPageQueryLeadReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReply.issuccess)
}

// optional string err = 2;
inline bool PkgPageQueryLeadReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryLeadReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryLeadReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryLeadReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgPageQueryLeadReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryLeadReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryLeadReply.err)
}
inline void PkgPageQueryLeadReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgPageQueryLeadReply.err)
}
inline void PkgPageQueryLeadReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgPageQueryLeadReply.err)
}
inline ::std::string* PkgPageQueryLeadReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryLeadReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgPageQueryLeadReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryLeadReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryLeadReply.err)
}

// repeated .xkcrm.db_crm_lead rows = 10;
inline int PkgPageQueryLeadReply::rows_size() const {
  return rows_.size();
}
inline void PkgPageQueryLeadReply::clear_rows() {
  rows_.Clear();
}
inline const ::xkcrm::db_crm_lead& PkgPageQueryLeadReply::rows(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryLeadReply.rows)
  return rows_.Get(index);
}
inline ::xkcrm::db_crm_lead* PkgPageQueryLeadReply::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryLeadReply.rows)
  return rows_.Mutable(index);
}
inline ::xkcrm::db_crm_lead* PkgPageQueryLeadReply::add_rows() {
  // @@protoc_insertion_point(field_add:xkcrm.PkgPageQueryLeadReply.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_lead >&
PkgPageQueryLeadReply::rows() const {
  // @@protoc_insertion_point(field_list:xkcrm.PkgPageQueryLeadReply.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_lead >*
PkgPageQueryLeadReply::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.PkgPageQueryLeadReply.rows)
  return &rows_;
}

// -------------------------------------------------------------------

// PkgPageQueryPhonecallReq

// optional int32 enconditon = 2 [default = 0];
inline bool PkgPageQueryPhonecallReq::has_enconditon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryPhonecallReq::set_has_enconditon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryPhonecallReq::clear_has_enconditon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryPhonecallReq::clear_enconditon() {
  enconditon_ = 0;
  clear_has_enconditon();
}
inline ::google::protobuf::int32 PkgPageQueryPhonecallReq::enconditon() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReq.enconditon)
  return enconditon_;
}
inline void PkgPageQueryPhonecallReq::set_enconditon(::google::protobuf::int32 value) {
  set_has_enconditon();
  enconditon_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReq.enconditon)
}

// optional .xkcrm.PkgQueryCondition pkgquerycondition = 3;
inline bool PkgPageQueryPhonecallReq::has_pkgquerycondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryPhonecallReq::set_has_pkgquerycondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryPhonecallReq::clear_has_pkgquerycondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryPhonecallReq::clear_pkgquerycondition() {
  if (pkgquerycondition_ != NULL) pkgquerycondition_->::xkcrm::PkgQueryCondition::Clear();
  clear_has_pkgquerycondition();
}
inline const ::xkcrm::PkgQueryCondition& PkgPageQueryPhonecallReq::pkgquerycondition() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReq.pkgquerycondition)
  return pkgquerycondition_ != NULL ? *pkgquerycondition_ : *default_instance_->pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryPhonecallReq::mutable_pkgquerycondition() {
  set_has_pkgquerycondition();
  if (pkgquerycondition_ == NULL) {
    pkgquerycondition_ = new ::xkcrm::PkgQueryCondition;
  }
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPhonecallReq.pkgquerycondition)
  return pkgquerycondition_;
}
inline ::xkcrm::PkgQueryCondition* PkgPageQueryPhonecallReq::release_pkgquerycondition() {
  clear_has_pkgquerycondition();
  ::xkcrm::PkgQueryCondition* temp = pkgquerycondition_;
  pkgquerycondition_ = NULL;
  return temp;
}
inline void PkgPageQueryPhonecallReq::set_allocated_pkgquerycondition(::xkcrm::PkgQueryCondition* pkgquerycondition) {
  delete pkgquerycondition_;
  pkgquerycondition_ = pkgquerycondition;
  if (pkgquerycondition) {
    set_has_pkgquerycondition();
  } else {
    clear_has_pkgquerycondition();
  }
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryPhonecallReq.pkgquerycondition)
}

// optional .xkcrm.EnPageFlag pageflag = 4 [default = P_RETURNALL];
inline bool PkgPageQueryPhonecallReq::has_pageflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgPageQueryPhonecallReq::set_has_pageflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgPageQueryPhonecallReq::clear_has_pageflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgPageQueryPhonecallReq::clear_pageflag() {
  pageflag_ = 2;
  clear_has_pageflag();
}
inline ::xkcrm::EnPageFlag PkgPageQueryPhonecallReq::pageflag() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReq.pageflag)
  return static_cast< ::xkcrm::EnPageFlag >(pageflag_);
}
inline void PkgPageQueryPhonecallReq::set_pageflag(::xkcrm::EnPageFlag value) {
  assert(::xkcrm::EnPageFlag_IsValid(value));
  set_has_pageflag();
  pageflag_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReq.pageflag)
}

// optional int32 indexstart = 5;
inline bool PkgPageQueryPhonecallReq::has_indexstart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgPageQueryPhonecallReq::set_has_indexstart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgPageQueryPhonecallReq::clear_has_indexstart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgPageQueryPhonecallReq::clear_indexstart() {
  indexstart_ = 0;
  clear_has_indexstart();
}
inline ::google::protobuf::int32 PkgPageQueryPhonecallReq::indexstart() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReq.indexstart)
  return indexstart_;
}
inline void PkgPageQueryPhonecallReq::set_indexstart(::google::protobuf::int32 value) {
  set_has_indexstart();
  indexstart_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReq.indexstart)
}

// optional int32 indexend = 6;
inline bool PkgPageQueryPhonecallReq::has_indexend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgPageQueryPhonecallReq::set_has_indexend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgPageQueryPhonecallReq::clear_has_indexend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgPageQueryPhonecallReq::clear_indexend() {
  indexend_ = 0;
  clear_has_indexend();
}
inline ::google::protobuf::int32 PkgPageQueryPhonecallReq::indexend() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReq.indexend)
  return indexend_;
}
inline void PkgPageQueryPhonecallReq::set_indexend(::google::protobuf::int32 value) {
  set_has_indexend();
  indexend_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReq.indexend)
}

// -------------------------------------------------------------------

// PkgPageQueryPhonecallReply

// required bool issuccess = 1;
inline bool PkgPageQueryPhonecallReply::has_issuccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgPageQueryPhonecallReply::set_has_issuccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgPageQueryPhonecallReply::clear_has_issuccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgPageQueryPhonecallReply::clear_issuccess() {
  issuccess_ = false;
  clear_has_issuccess();
}
inline bool PkgPageQueryPhonecallReply::issuccess() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReply.issuccess)
  return issuccess_;
}
inline void PkgPageQueryPhonecallReply::set_issuccess(bool value) {
  set_has_issuccess();
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReply.issuccess)
}

// optional string err = 2;
inline bool PkgPageQueryPhonecallReply::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgPageQueryPhonecallReply::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgPageQueryPhonecallReply::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgPageQueryPhonecallReply::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err();
}
inline const ::std::string& PkgPageQueryPhonecallReply::err() const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReply.err)
  return err_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryPhonecallReply::set_err(const ::std::string& value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.PkgPageQueryPhonecallReply.err)
}
inline void PkgPageQueryPhonecallReply::set_err(const char* value) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.PkgPageQueryPhonecallReply.err)
}
inline void PkgPageQueryPhonecallReply::set_err(const char* value, size_t size) {
  set_has_err();
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.PkgPageQueryPhonecallReply.err)
}
inline ::std::string* PkgPageQueryPhonecallReply::mutable_err() {
  set_has_err();
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPhonecallReply.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgPageQueryPhonecallReply::release_err() {
  clear_has_err();
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgPageQueryPhonecallReply::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    set_has_err();
  } else {
    clear_has_err();
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.PkgPageQueryPhonecallReply.err)
}

// repeated .xkcrm.db_crm_phonecall rows = 10;
inline int PkgPageQueryPhonecallReply::rows_size() const {
  return rows_.size();
}
inline void PkgPageQueryPhonecallReply::clear_rows() {
  rows_.Clear();
}
inline const ::xkcrm::db_crm_phonecall& PkgPageQueryPhonecallReply::rows(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.PkgPageQueryPhonecallReply.rows)
  return rows_.Get(index);
}
inline ::xkcrm::db_crm_phonecall* PkgPageQueryPhonecallReply::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.PkgPageQueryPhonecallReply.rows)
  return rows_.Mutable(index);
}
inline ::xkcrm::db_crm_phonecall* PkgPageQueryPhonecallReply::add_rows() {
  // @@protoc_insertion_point(field_add:xkcrm.PkgPageQueryPhonecallReply.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_phonecall >&
PkgPageQueryPhonecallReply::rows() const {
  // @@protoc_insertion_point(field_list:xkcrm.PkgPageQueryPhonecallReply.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::xkcrm::db_crm_phonecall >*
PkgPageQueryPhonecallReply::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.PkgPageQueryPhonecallReply.rows)
  return &rows_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xkcrm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::xkcrm::EnGetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xkcrm::EnGetType>() {
  return ::xkcrm::EnGetType_descriptor();
}
template <> struct is_proto_enum< ::xkcrm::EnOperation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xkcrm::EnOperation>() {
  return ::xkcrm::EnOperation_descriptor();
}
template <> struct is_proto_enum< ::xkcrm::EnQueryCondition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xkcrm::EnQueryCondition>() {
  return ::xkcrm::EnQueryCondition_descriptor();
}
template <> struct is_proto_enum< ::xkcrm::EnPageFlag> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xkcrm::EnPageFlag>() {
  return ::xkcrm::EnPageFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xkcrm_2eproto__INCLUDED
