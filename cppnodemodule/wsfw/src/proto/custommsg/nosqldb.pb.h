// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nosqldb.proto

#ifndef PROTOBUF_nosqldb_2eproto__INCLUDED
#define PROTOBUF_nosqldb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace xkcrm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nosqldb_2eproto();
void protobuf_AssignDesc_nosqldb_2eproto();
void protobuf_ShutdownFile_nosqldb_2eproto();

class db_res_users;
class db_res_company;
class db_res_partner;
class db_crm_lead;
class db_crm_phonecall;

// ===================================================================

class db_res_users : public ::google::protobuf::Message {
 public:
  db_res_users();
  virtual ~db_res_users();

  db_res_users(const db_res_users& from);

  inline db_res_users& operator=(const db_res_users& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_res_users& default_instance();

  void Swap(db_res_users* other);

  // implements Message ----------------------------------------------

  inline db_res_users* New() const { return New(NULL); }

  db_res_users* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_res_users& from);
  void MergeFrom(const db_res_users& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_res_users* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuiduserid = 1;
  inline bool has_uuiduserid() const;
  inline void clear_uuiduserid();
  static const int kUuiduseridFieldNumber = 1;
  inline const ::std::string& uuiduserid() const;
  inline void set_uuiduserid(const ::std::string& value);
  inline void set_uuiduserid(const char* value);
  inline void set_uuiduserid(const char* value, size_t size);
  inline ::std::string* mutable_uuiduserid();
  inline ::std::string* release_uuiduserid();
  inline void set_allocated_uuiduserid(::std::string* uuiduserid);

  // required string type = 2 [default = "res_user"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional string uuidcompanyid = 4;
  inline bool has_uuidcompanyid() const;
  inline void clear_uuidcompanyid();
  static const int kUuidcompanyidFieldNumber = 4;
  inline const ::std::string& uuidcompanyid() const;
  inline void set_uuidcompanyid(const ::std::string& value);
  inline void set_uuidcompanyid(const char* value);
  inline void set_uuidcompanyid(const char* value, size_t size);
  inline ::std::string* mutable_uuidcompanyid();
  inline ::std::string* release_uuidcompanyid();
  inline void set_allocated_uuidcompanyid(::std::string* uuidcompanyid);

  // optional string realname = 11;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealnameFieldNumber = 11;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const char* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // optional string phonenumber = 12;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 12;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string emailaddress = 13;
  inline bool has_emailaddress() const;
  inline void clear_emailaddress();
  static const int kEmailaddressFieldNumber = 13;
  inline const ::std::string& emailaddress() const;
  inline void set_emailaddress(const ::std::string& value);
  inline void set_emailaddress(const char* value);
  inline void set_emailaddress(const char* value, size_t size);
  inline ::std::string* mutable_emailaddress();
  inline ::std::string* release_emailaddress();
  inline void set_allocated_emailaddress(::std::string* emailaddress);

  // optional string hashedpassword = 14;
  inline bool has_hashedpassword() const;
  inline void clear_hashedpassword();
  static const int kHashedpasswordFieldNumber = 14;
  inline const ::std::string& hashedpassword() const;
  inline void set_hashedpassword(const ::std::string& value);
  inline void set_hashedpassword(const char* value);
  inline void set_hashedpassword(const char* value, size_t size);
  inline ::std::string* mutable_hashedpassword();
  inline ::std::string* release_hashedpassword();
  inline void set_allocated_hashedpassword(::std::string* hashedpassword);

  // @@protoc_insertion_point(class_scope:xkcrm.db_res_users)
 private:
  inline void set_has_uuiduserid();
  inline void clear_has_uuiduserid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuidcompanyid();
  inline void clear_has_uuidcompanyid();
  inline void set_has_realname();
  inline void clear_has_realname();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_emailaddress();
  inline void clear_has_emailaddress();
  inline void set_has_hashedpassword();
  inline void clear_has_hashedpassword();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuiduserid_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr uuidcompanyid_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::internal::ArenaStringPtr emailaddress_;
  ::google::protobuf::internal::ArenaStringPtr hashedpassword_;
  friend void  protobuf_AddDesc_nosqldb_2eproto();
  friend void protobuf_AssignDesc_nosqldb_2eproto();
  friend void protobuf_ShutdownFile_nosqldb_2eproto();

  void InitAsDefaultInstance();
  static db_res_users* default_instance_;
};
// -------------------------------------------------------------------

class db_res_company : public ::google::protobuf::Message {
 public:
  db_res_company();
  virtual ~db_res_company();

  db_res_company(const db_res_company& from);

  inline db_res_company& operator=(const db_res_company& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_res_company& default_instance();

  void Swap(db_res_company* other);

  // implements Message ----------------------------------------------

  inline db_res_company* New() const { return New(NULL); }

  db_res_company* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_res_company& from);
  void MergeFrom(const db_res_company& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_res_company* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuidcompanyid = 1;
  inline bool has_uuidcompanyid() const;
  inline void clear_uuidcompanyid();
  static const int kUuidcompanyidFieldNumber = 1;
  inline const ::std::string& uuidcompanyid() const;
  inline void set_uuidcompanyid(const ::std::string& value);
  inline void set_uuidcompanyid(const char* value);
  inline void set_uuidcompanyid(const char* value, size_t size);
  inline ::std::string* mutable_uuidcompanyid();
  inline ::std::string* release_uuidcompanyid();
  inline void set_allocated_uuidcompanyid(::std::string* uuidcompanyid);

  // required string type = 2 [default = "res_company"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional string companyname = 11;
  inline bool has_companyname() const;
  inline void clear_companyname();
  static const int kCompanynameFieldNumber = 11;
  inline const ::std::string& companyname() const;
  inline void set_companyname(const ::std::string& value);
  inline void set_companyname(const char* value);
  inline void set_companyname(const char* value, size_t size);
  inline ::std::string* mutable_companyname();
  inline ::std::string* release_companyname();
  inline void set_allocated_companyname(::std::string* companyname);

  // @@protoc_insertion_point(class_scope:xkcrm.db_res_company)
 private:
  inline void set_has_uuidcompanyid();
  inline void clear_has_uuidcompanyid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_companyname();
  inline void clear_has_companyname();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuidcompanyid_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr companyname_;
  friend void  protobuf_AddDesc_nosqldb_2eproto();
  friend void protobuf_AssignDesc_nosqldb_2eproto();
  friend void protobuf_ShutdownFile_nosqldb_2eproto();

  void InitAsDefaultInstance();
  static db_res_company* default_instance_;
};
// -------------------------------------------------------------------

class db_res_partner : public ::google::protobuf::Message {
 public:
  db_res_partner();
  virtual ~db_res_partner();

  db_res_partner(const db_res_partner& from);

  inline db_res_partner& operator=(const db_res_partner& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_res_partner& default_instance();

  void Swap(db_res_partner* other);

  // implements Message ----------------------------------------------

  inline db_res_partner* New() const { return New(NULL); }

  db_res_partner* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_res_partner& from);
  void MergeFrom(const db_res_partner& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_res_partner* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuidpartner = 1;
  inline bool has_uuidpartner() const;
  inline void clear_uuidpartner();
  static const int kUuidpartnerFieldNumber = 1;
  inline const ::std::string& uuidpartner() const;
  inline void set_uuidpartner(const ::std::string& value);
  inline void set_uuidpartner(const char* value);
  inline void set_uuidpartner(const char* value, size_t size);
  inline ::std::string* mutable_uuidpartner();
  inline ::std::string* release_uuidpartner();
  inline void set_allocated_uuidpartner(::std::string* uuidpartner);

  // required string type = 2 [default = "res_partner"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // optional string partnername = 11;
  inline bool has_partnername() const;
  inline void clear_partnername();
  static const int kPartnernameFieldNumber = 11;
  inline const ::std::string& partnername() const;
  inline void set_partnername(const ::std::string& value);
  inline void set_partnername(const char* value);
  inline void set_partnername(const char* value, size_t size);
  inline ::std::string* mutable_partnername();
  inline ::std::string* release_partnername();
  inline void set_allocated_partnername(::std::string* partnername);

  // @@protoc_insertion_point(class_scope:xkcrm.db_res_partner)
 private:
  inline void set_has_uuidpartner();
  inline void clear_has_uuidpartner();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_partnername();
  inline void clear_has_partnername();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuidpartner_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr partnername_;
  friend void  protobuf_AddDesc_nosqldb_2eproto();
  friend void protobuf_AssignDesc_nosqldb_2eproto();
  friend void protobuf_ShutdownFile_nosqldb_2eproto();

  void InitAsDefaultInstance();
  static db_res_partner* default_instance_;
};
// -------------------------------------------------------------------

class db_crm_lead : public ::google::protobuf::Message {
 public:
  db_crm_lead();
  virtual ~db_crm_lead();

  db_crm_lead(const db_crm_lead& from);

  inline db_crm_lead& operator=(const db_crm_lead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crm_lead& default_instance();

  void Swap(db_crm_lead* other);

  // implements Message ----------------------------------------------

  inline db_crm_lead* New() const { return New(NULL); }

  db_crm_lead* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crm_lead& from);
  void MergeFrom(const db_crm_lead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_crm_lead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuidleadid = 1;
  inline bool has_uuidleadid() const;
  inline void clear_uuidleadid();
  static const int kUuidleadidFieldNumber = 1;
  inline const ::std::string& uuidleadid() const;
  inline void set_uuidleadid(const ::std::string& value);
  inline void set_uuidleadid(const char* value);
  inline void set_uuidleadid(const char* value, size_t size);
  inline ::std::string* mutable_uuidleadid();
  inline ::std::string* release_uuidleadid();
  inline void set_allocated_uuidleadid(::std::string* uuidleadid);

  // required string type = 2 [default = "crm_lead"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // required string uuiduserid = 4;
  inline bool has_uuiduserid() const;
  inline void clear_uuiduserid();
  static const int kUuiduseridFieldNumber = 4;
  inline const ::std::string& uuiduserid() const;
  inline void set_uuiduserid(const ::std::string& value);
  inline void set_uuiduserid(const char* value);
  inline void set_uuiduserid(const char* value, size_t size);
  inline ::std::string* mutable_uuiduserid();
  inline ::std::string* release_uuiduserid();
  inline void set_allocated_uuiduserid(::std::string* uuiduserid);

  // optional string uuidcompanyid = 5;
  inline bool has_uuidcompanyid() const;
  inline void clear_uuidcompanyid();
  static const int kUuidcompanyidFieldNumber = 5;
  inline const ::std::string& uuidcompanyid() const;
  inline void set_uuidcompanyid(const ::std::string& value);
  inline void set_uuidcompanyid(const char* value);
  inline void set_uuidcompanyid(const char* value, size_t size);
  inline ::std::string* mutable_uuidcompanyid();
  inline ::std::string* release_uuidcompanyid();
  inline void set_allocated_uuidcompanyid(::std::string* uuidcompanyid);

  // optional string leadname = 10;
  inline bool has_leadname() const;
  inline void clear_leadname();
  static const int kLeadnameFieldNumber = 10;
  inline const ::std::string& leadname() const;
  inline void set_leadname(const ::std::string& value);
  inline void set_leadname(const char* value);
  inline void set_leadname(const char* value, size_t size);
  inline ::std::string* mutable_leadname();
  inline ::std::string* release_leadname();
  inline void set_allocated_leadname(::std::string* leadname);

  // optional string createdate = 11;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreatedateFieldNumber = 11;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional string partnername = 12;
  inline bool has_partnername() const;
  inline void clear_partnername();
  static const int kPartnernameFieldNumber = 12;
  inline const ::std::string& partnername() const;
  inline void set_partnername(const ::std::string& value);
  inline void set_partnername(const char* value);
  inline void set_partnername(const char* value, size_t size);
  inline ::std::string* mutable_partnername();
  inline ::std::string* release_partnername();
  inline void set_allocated_partnername(::std::string* partnername);

  // optional string street = 17;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 17;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  inline void set_allocated_street(::std::string* street);

  // @@protoc_insertion_point(class_scope:xkcrm.db_crm_lead)
 private:
  inline void set_has_uuidleadid();
  inline void clear_has_uuidleadid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuiduserid();
  inline void clear_has_uuiduserid();
  inline void set_has_uuidcompanyid();
  inline void clear_has_uuidcompanyid();
  inline void set_has_leadname();
  inline void clear_has_leadname();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_partnername();
  inline void clear_has_partnername();
  inline void set_has_street();
  inline void clear_has_street();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuidleadid_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr uuiduserid_;
  ::google::protobuf::internal::ArenaStringPtr uuidcompanyid_;
  ::google::protobuf::internal::ArenaStringPtr leadname_;
  ::google::protobuf::internal::ArenaStringPtr createdate_;
  ::google::protobuf::internal::ArenaStringPtr partnername_;
  ::google::protobuf::internal::ArenaStringPtr street_;
  friend void  protobuf_AddDesc_nosqldb_2eproto();
  friend void protobuf_AssignDesc_nosqldb_2eproto();
  friend void protobuf_ShutdownFile_nosqldb_2eproto();

  void InitAsDefaultInstance();
  static db_crm_lead* default_instance_;
};
// -------------------------------------------------------------------

class db_crm_phonecall : public ::google::protobuf::Message {
 public:
  db_crm_phonecall();
  virtual ~db_crm_phonecall();

  db_crm_phonecall(const db_crm_phonecall& from);

  inline db_crm_phonecall& operator=(const db_crm_phonecall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const db_crm_phonecall& default_instance();

  void Swap(db_crm_phonecall* other);

  // implements Message ----------------------------------------------

  inline db_crm_phonecall* New() const { return New(NULL); }

  db_crm_phonecall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const db_crm_phonecall& from);
  void MergeFrom(const db_crm_phonecall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(db_crm_phonecall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuidphonecallid = 1;
  inline bool has_uuidphonecallid() const;
  inline void clear_uuidphonecallid();
  static const int kUuidphonecallidFieldNumber = 1;
  inline const ::std::string& uuidphonecallid() const;
  inline void set_uuidphonecallid(const ::std::string& value);
  inline void set_uuidphonecallid(const char* value);
  inline void set_uuidphonecallid(const char* value, size_t size);
  inline ::std::string* mutable_uuidphonecallid();
  inline ::std::string* release_uuidphonecallid();
  inline void set_allocated_uuidphonecallid(::std::string* uuidphonecallid);

  // required string type = 2 [default = "crm_phonecall"];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated string channel = 3;
  inline int channel_size() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline const ::std::string& channel(int index) const;
  inline ::std::string* mutable_channel(int index);
  inline void set_channel(int index, const ::std::string& value);
  inline void set_channel(int index, const char* value);
  inline void set_channel(int index, const char* value, size_t size);
  inline ::std::string* add_channel();
  inline void add_channel(const ::std::string& value);
  inline void add_channel(const char* value);
  inline void add_channel(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& channel() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_channel();

  // required string uuiduserid = 4;
  inline bool has_uuiduserid() const;
  inline void clear_uuiduserid();
  static const int kUuiduseridFieldNumber = 4;
  inline const ::std::string& uuiduserid() const;
  inline void set_uuiduserid(const ::std::string& value);
  inline void set_uuiduserid(const char* value);
  inline void set_uuiduserid(const char* value, size_t size);
  inline ::std::string* mutable_uuiduserid();
  inline ::std::string* release_uuiduserid();
  inline void set_allocated_uuiduserid(::std::string* uuiduserid);

  // optional string uuidpartner = 5;
  inline bool has_uuidpartner() const;
  inline void clear_uuidpartner();
  static const int kUuidpartnerFieldNumber = 5;
  inline const ::std::string& uuidpartner() const;
  inline void set_uuidpartner(const ::std::string& value);
  inline void set_uuidpartner(const char* value);
  inline void set_uuidpartner(const char* value, size_t size);
  inline ::std::string* mutable_uuidpartner();
  inline ::std::string* release_uuidpartner();
  inline void set_allocated_uuidpartner(::std::string* uuidpartner);

  // @@protoc_insertion_point(class_scope:xkcrm.db_crm_phonecall)
 private:
  inline void set_has_uuidphonecallid();
  inline void clear_has_uuidphonecallid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuiduserid();
  inline void clear_has_uuiduserid();
  inline void set_has_uuidpartner();
  inline void clear_has_uuidpartner();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr uuidphonecallid_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> channel_;
  ::google::protobuf::internal::ArenaStringPtr uuiduserid_;
  ::google::protobuf::internal::ArenaStringPtr uuidpartner_;
  friend void  protobuf_AddDesc_nosqldb_2eproto();
  friend void protobuf_AssignDesc_nosqldb_2eproto();
  friend void protobuf_ShutdownFile_nosqldb_2eproto();

  void InitAsDefaultInstance();
  static db_crm_phonecall* default_instance_;
};
// ===================================================================


// ===================================================================

// db_res_users

// required string uuiduserid = 1;
inline bool db_res_users::has_uuiduserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_res_users::set_has_uuiduserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_res_users::clear_has_uuiduserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_res_users::clear_uuiduserid() {
  uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuiduserid();
}
inline const ::std::string& db_res_users::uuiduserid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.uuiduserid)
  return uuiduserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_uuiduserid(const ::std::string& value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.uuiduserid)
}
inline void db_res_users::set_uuiduserid(const char* value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.uuiduserid)
}
inline void db_res_users::set_uuiduserid(const char* value, size_t size) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.uuiduserid)
}
inline ::std::string* db_res_users::mutable_uuiduserid() {
  set_has_uuiduserid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.uuiduserid)
  return uuiduserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_uuiduserid() {
  clear_has_uuiduserid();
  return uuiduserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_uuiduserid(::std::string* uuiduserid) {
  if (uuiduserid != NULL) {
    set_has_uuiduserid();
  } else {
    clear_has_uuiduserid();
  }
  uuiduserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuiduserid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.uuiduserid)
}

// required string type = 2 [default = "res_user"];
inline bool db_res_users::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_res_users::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_res_users::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_res_users::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& db_res_users::type() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.type)
  return type_.GetNoArena(_default_type_);
}
inline void db_res_users::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.type)
}
inline void db_res_users::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.type)
}
inline void db_res_users::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.type)
}
inline ::std::string* db_res_users::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* db_res_users::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void db_res_users::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.type)
}

// repeated string channel = 3;
inline int db_res_users::channel_size() const {
  return channel_.size();
}
inline void db_res_users::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& db_res_users::channel(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.channel)
  return channel_.Get(index);
}
inline ::std::string* db_res_users::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.channel)
  return channel_.Mutable(index);
}
inline void db_res_users::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.channel)
  channel_.Mutable(index)->assign(value);
}
inline void db_res_users::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.channel)
}
inline void db_res_users::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.channel)
}
inline ::std::string* db_res_users::add_channel() {
  return channel_.Add();
}
inline void db_res_users::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xkcrm.db_res_users.channel)
}
inline void db_res_users::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xkcrm.db_res_users.channel)
}
inline void db_res_users::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xkcrm.db_res_users.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_res_users::channel() const {
  // @@protoc_insertion_point(field_list:xkcrm.db_res_users.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_res_users::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.db_res_users.channel)
  return &channel_;
}

// optional string uuidcompanyid = 4;
inline bool db_res_users::has_uuidcompanyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_res_users::set_has_uuidcompanyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_res_users::clear_has_uuidcompanyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_res_users::clear_uuidcompanyid() {
  uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidcompanyid();
}
inline const ::std::string& db_res_users::uuidcompanyid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.uuidcompanyid)
  return uuidcompanyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_uuidcompanyid(const ::std::string& value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.uuidcompanyid)
}
inline void db_res_users::set_uuidcompanyid(const char* value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.uuidcompanyid)
}
inline void db_res_users::set_uuidcompanyid(const char* value, size_t size) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.uuidcompanyid)
}
inline ::std::string* db_res_users::mutable_uuidcompanyid() {
  set_has_uuidcompanyid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.uuidcompanyid)
  return uuidcompanyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_uuidcompanyid() {
  clear_has_uuidcompanyid();
  return uuidcompanyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_uuidcompanyid(::std::string* uuidcompanyid) {
  if (uuidcompanyid != NULL) {
    set_has_uuidcompanyid();
  } else {
    clear_has_uuidcompanyid();
  }
  uuidcompanyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidcompanyid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.uuidcompanyid)
}

// optional string realname = 11;
inline bool db_res_users::has_realname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_res_users::set_has_realname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_res_users::clear_has_realname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_res_users::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
inline const ::std::string& db_res_users::realname() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.realname)
  return realname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.realname)
}
inline void db_res_users::set_realname(const char* value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.realname)
}
inline void db_res_users::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.realname)
}
inline ::std::string* db_res_users::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.realname)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_realname() {
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.realname)
}

// optional string phonenumber = 12;
inline bool db_res_users::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_res_users::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_res_users::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_res_users::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenumber();
}
inline const ::std::string& db_res_users::phonenumber() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.phonenumber)
  return phonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.phonenumber)
}
inline void db_res_users::set_phonenumber(const char* value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.phonenumber)
}
inline void db_res_users::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.phonenumber)
}
inline ::std::string* db_res_users::mutable_phonenumber() {
  set_has_phonenumber();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.phonenumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_phonenumber() {
  clear_has_phonenumber();
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    set_has_phonenumber();
  } else {
    clear_has_phonenumber();
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.phonenumber)
}

// optional string emailaddress = 13;
inline bool db_res_users::has_emailaddress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_res_users::set_has_emailaddress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_res_users::clear_has_emailaddress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_res_users::clear_emailaddress() {
  emailaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emailaddress();
}
inline const ::std::string& db_res_users::emailaddress() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.emailaddress)
  return emailaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_emailaddress(const ::std::string& value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.emailaddress)
}
inline void db_res_users::set_emailaddress(const char* value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.emailaddress)
}
inline void db_res_users::set_emailaddress(const char* value, size_t size) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.emailaddress)
}
inline ::std::string* db_res_users::mutable_emailaddress() {
  set_has_emailaddress();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.emailaddress)
  return emailaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_emailaddress() {
  clear_has_emailaddress();
  return emailaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_emailaddress(::std::string* emailaddress) {
  if (emailaddress != NULL) {
    set_has_emailaddress();
  } else {
    clear_has_emailaddress();
  }
  emailaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailaddress);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.emailaddress)
}

// optional string hashedpassword = 14;
inline bool db_res_users::has_hashedpassword() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_res_users::set_has_hashedpassword() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_res_users::clear_has_hashedpassword() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_res_users::clear_hashedpassword() {
  hashedpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashedpassword();
}
inline const ::std::string& db_res_users::hashedpassword() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_users.hashedpassword)
  return hashedpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_hashedpassword(const ::std::string& value) {
  set_has_hashedpassword();
  hashedpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_users.hashedpassword)
}
inline void db_res_users::set_hashedpassword(const char* value) {
  set_has_hashedpassword();
  hashedpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_users.hashedpassword)
}
inline void db_res_users::set_hashedpassword(const char* value, size_t size) {
  set_has_hashedpassword();
  hashedpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_users.hashedpassword)
}
inline ::std::string* db_res_users::mutable_hashedpassword() {
  set_has_hashedpassword();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_users.hashedpassword)
  return hashedpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_users::release_hashedpassword() {
  clear_has_hashedpassword();
  return hashedpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_users::set_allocated_hashedpassword(::std::string* hashedpassword) {
  if (hashedpassword != NULL) {
    set_has_hashedpassword();
  } else {
    clear_has_hashedpassword();
  }
  hashedpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashedpassword);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_users.hashedpassword)
}

// -------------------------------------------------------------------

// db_res_company

// required string uuidcompanyid = 1;
inline bool db_res_company::has_uuidcompanyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_res_company::set_has_uuidcompanyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_res_company::clear_has_uuidcompanyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_res_company::clear_uuidcompanyid() {
  uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidcompanyid();
}
inline const ::std::string& db_res_company::uuidcompanyid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_company.uuidcompanyid)
  return uuidcompanyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_company::set_uuidcompanyid(const ::std::string& value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_company.uuidcompanyid)
}
inline void db_res_company::set_uuidcompanyid(const char* value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_company.uuidcompanyid)
}
inline void db_res_company::set_uuidcompanyid(const char* value, size_t size) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_company.uuidcompanyid)
}
inline ::std::string* db_res_company::mutable_uuidcompanyid() {
  set_has_uuidcompanyid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_company.uuidcompanyid)
  return uuidcompanyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_company::release_uuidcompanyid() {
  clear_has_uuidcompanyid();
  return uuidcompanyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_company::set_allocated_uuidcompanyid(::std::string* uuidcompanyid) {
  if (uuidcompanyid != NULL) {
    set_has_uuidcompanyid();
  } else {
    clear_has_uuidcompanyid();
  }
  uuidcompanyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidcompanyid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_company.uuidcompanyid)
}

// required string type = 2 [default = "res_company"];
inline bool db_res_company::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_res_company::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_res_company::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_res_company::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& db_res_company::type() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_company.type)
  return type_.GetNoArena(_default_type_);
}
inline void db_res_company::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_company.type)
}
inline void db_res_company::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_company.type)
}
inline void db_res_company::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_company.type)
}
inline ::std::string* db_res_company::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_company.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* db_res_company::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void db_res_company::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_company.type)
}

// repeated string channel = 3;
inline int db_res_company::channel_size() const {
  return channel_.size();
}
inline void db_res_company::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& db_res_company::channel(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_company.channel)
  return channel_.Get(index);
}
inline ::std::string* db_res_company::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_company.channel)
  return channel_.Mutable(index);
}
inline void db_res_company::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xkcrm.db_res_company.channel)
  channel_.Mutable(index)->assign(value);
}
inline void db_res_company::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_company.channel)
}
inline void db_res_company::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_company.channel)
}
inline ::std::string* db_res_company::add_channel() {
  return channel_.Add();
}
inline void db_res_company::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xkcrm.db_res_company.channel)
}
inline void db_res_company::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xkcrm.db_res_company.channel)
}
inline void db_res_company::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xkcrm.db_res_company.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_res_company::channel() const {
  // @@protoc_insertion_point(field_list:xkcrm.db_res_company.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_res_company::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.db_res_company.channel)
  return &channel_;
}

// optional string companyname = 11;
inline bool db_res_company::has_companyname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_res_company::set_has_companyname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_res_company::clear_has_companyname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_res_company::clear_companyname() {
  companyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_companyname();
}
inline const ::std::string& db_res_company::companyname() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_company.companyname)
  return companyname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_company::set_companyname(const ::std::string& value) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_company.companyname)
}
inline void db_res_company::set_companyname(const char* value) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_company.companyname)
}
inline void db_res_company::set_companyname(const char* value, size_t size) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_company.companyname)
}
inline ::std::string* db_res_company::mutable_companyname() {
  set_has_companyname();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_company.companyname)
  return companyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_company::release_companyname() {
  clear_has_companyname();
  return companyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_company::set_allocated_companyname(::std::string* companyname) {
  if (companyname != NULL) {
    set_has_companyname();
  } else {
    clear_has_companyname();
  }
  companyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), companyname);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_company.companyname)
}

// -------------------------------------------------------------------

// db_res_partner

// required string uuidpartner = 1;
inline bool db_res_partner::has_uuidpartner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_res_partner::set_has_uuidpartner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_res_partner::clear_has_uuidpartner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_res_partner::clear_uuidpartner() {
  uuidpartner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidpartner();
}
inline const ::std::string& db_res_partner::uuidpartner() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_partner.uuidpartner)
  return uuidpartner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_partner::set_uuidpartner(const ::std::string& value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_partner.uuidpartner)
}
inline void db_res_partner::set_uuidpartner(const char* value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_partner.uuidpartner)
}
inline void db_res_partner::set_uuidpartner(const char* value, size_t size) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_partner.uuidpartner)
}
inline ::std::string* db_res_partner::mutable_uuidpartner() {
  set_has_uuidpartner();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_partner.uuidpartner)
  return uuidpartner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_partner::release_uuidpartner() {
  clear_has_uuidpartner();
  return uuidpartner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_partner::set_allocated_uuidpartner(::std::string* uuidpartner) {
  if (uuidpartner != NULL) {
    set_has_uuidpartner();
  } else {
    clear_has_uuidpartner();
  }
  uuidpartner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidpartner);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_partner.uuidpartner)
}

// required string type = 2 [default = "res_partner"];
inline bool db_res_partner::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_res_partner::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_res_partner::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_res_partner::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& db_res_partner::type() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_partner.type)
  return type_.GetNoArena(_default_type_);
}
inline void db_res_partner::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_partner.type)
}
inline void db_res_partner::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_partner.type)
}
inline void db_res_partner::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_partner.type)
}
inline ::std::string* db_res_partner::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_partner.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* db_res_partner::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void db_res_partner::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_partner.type)
}

// repeated string channel = 3;
inline int db_res_partner::channel_size() const {
  return channel_.size();
}
inline void db_res_partner::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& db_res_partner::channel(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_partner.channel)
  return channel_.Get(index);
}
inline ::std::string* db_res_partner::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_partner.channel)
  return channel_.Mutable(index);
}
inline void db_res_partner::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xkcrm.db_res_partner.channel)
  channel_.Mutable(index)->assign(value);
}
inline void db_res_partner::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_partner.channel)
}
inline void db_res_partner::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_partner.channel)
}
inline ::std::string* db_res_partner::add_channel() {
  return channel_.Add();
}
inline void db_res_partner::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xkcrm.db_res_partner.channel)
}
inline void db_res_partner::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xkcrm.db_res_partner.channel)
}
inline void db_res_partner::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xkcrm.db_res_partner.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_res_partner::channel() const {
  // @@protoc_insertion_point(field_list:xkcrm.db_res_partner.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_res_partner::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.db_res_partner.channel)
  return &channel_;
}

// optional string partnername = 11;
inline bool db_res_partner::has_partnername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_res_partner::set_has_partnername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_res_partner::clear_has_partnername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_res_partner::clear_partnername() {
  partnername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partnername();
}
inline const ::std::string& db_res_partner::partnername() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_res_partner.partnername)
  return partnername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_partner::set_partnername(const ::std::string& value) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_res_partner.partnername)
}
inline void db_res_partner::set_partnername(const char* value) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_res_partner.partnername)
}
inline void db_res_partner::set_partnername(const char* value, size_t size) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_res_partner.partnername)
}
inline ::std::string* db_res_partner::mutable_partnername() {
  set_has_partnername();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_res_partner.partnername)
  return partnername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_res_partner::release_partnername() {
  clear_has_partnername();
  return partnername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_res_partner::set_allocated_partnername(::std::string* partnername) {
  if (partnername != NULL) {
    set_has_partnername();
  } else {
    clear_has_partnername();
  }
  partnername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partnername);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_res_partner.partnername)
}

// -------------------------------------------------------------------

// db_crm_lead

// required string uuidleadid = 1;
inline bool db_crm_lead::has_uuidleadid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crm_lead::set_has_uuidleadid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crm_lead::clear_has_uuidleadid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crm_lead::clear_uuidleadid() {
  uuidleadid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidleadid();
}
inline const ::std::string& db_crm_lead::uuidleadid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.uuidleadid)
  return uuidleadid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_uuidleadid(const ::std::string& value) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.uuidleadid)
}
inline void db_crm_lead::set_uuidleadid(const char* value) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.uuidleadid)
}
inline void db_crm_lead::set_uuidleadid(const char* value, size_t size) {
  set_has_uuidleadid();
  uuidleadid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.uuidleadid)
}
inline ::std::string* db_crm_lead::mutable_uuidleadid() {
  set_has_uuidleadid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.uuidleadid)
  return uuidleadid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_uuidleadid() {
  clear_has_uuidleadid();
  return uuidleadid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_uuidleadid(::std::string* uuidleadid) {
  if (uuidleadid != NULL) {
    set_has_uuidleadid();
  } else {
    clear_has_uuidleadid();
  }
  uuidleadid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidleadid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.uuidleadid)
}

// required string type = 2 [default = "crm_lead"];
inline bool db_crm_lead::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crm_lead::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crm_lead::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crm_lead::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& db_crm_lead::type() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.type)
  return type_.GetNoArena(_default_type_);
}
inline void db_crm_lead::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.type)
}
inline void db_crm_lead::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.type)
}
inline void db_crm_lead::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.type)
}
inline ::std::string* db_crm_lead::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* db_crm_lead::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void db_crm_lead::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.type)
}

// repeated string channel = 3;
inline int db_crm_lead::channel_size() const {
  return channel_.size();
}
inline void db_crm_lead::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& db_crm_lead::channel(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.channel)
  return channel_.Get(index);
}
inline ::std::string* db_crm_lead::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.channel)
  return channel_.Mutable(index);
}
inline void db_crm_lead::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.channel)
  channel_.Mutable(index)->assign(value);
}
inline void db_crm_lead::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.channel)
}
inline void db_crm_lead::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.channel)
}
inline ::std::string* db_crm_lead::add_channel() {
  return channel_.Add();
}
inline void db_crm_lead::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xkcrm.db_crm_lead.channel)
}
inline void db_crm_lead::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xkcrm.db_crm_lead.channel)
}
inline void db_crm_lead::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xkcrm.db_crm_lead.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_crm_lead::channel() const {
  // @@protoc_insertion_point(field_list:xkcrm.db_crm_lead.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_crm_lead::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.db_crm_lead.channel)
  return &channel_;
}

// required string uuiduserid = 4;
inline bool db_crm_lead::has_uuiduserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crm_lead::set_has_uuiduserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crm_lead::clear_has_uuiduserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crm_lead::clear_uuiduserid() {
  uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuiduserid();
}
inline const ::std::string& db_crm_lead::uuiduserid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.uuiduserid)
  return uuiduserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_uuiduserid(const ::std::string& value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.uuiduserid)
}
inline void db_crm_lead::set_uuiduserid(const char* value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.uuiduserid)
}
inline void db_crm_lead::set_uuiduserid(const char* value, size_t size) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.uuiduserid)
}
inline ::std::string* db_crm_lead::mutable_uuiduserid() {
  set_has_uuiduserid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.uuiduserid)
  return uuiduserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_uuiduserid() {
  clear_has_uuiduserid();
  return uuiduserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_uuiduserid(::std::string* uuiduserid) {
  if (uuiduserid != NULL) {
    set_has_uuiduserid();
  } else {
    clear_has_uuiduserid();
  }
  uuiduserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuiduserid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.uuiduserid)
}

// optional string uuidcompanyid = 5;
inline bool db_crm_lead::has_uuidcompanyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_crm_lead::set_has_uuidcompanyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_crm_lead::clear_has_uuidcompanyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_crm_lead::clear_uuidcompanyid() {
  uuidcompanyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidcompanyid();
}
inline const ::std::string& db_crm_lead::uuidcompanyid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.uuidcompanyid)
  return uuidcompanyid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_uuidcompanyid(const ::std::string& value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.uuidcompanyid)
}
inline void db_crm_lead::set_uuidcompanyid(const char* value) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.uuidcompanyid)
}
inline void db_crm_lead::set_uuidcompanyid(const char* value, size_t size) {
  set_has_uuidcompanyid();
  uuidcompanyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.uuidcompanyid)
}
inline ::std::string* db_crm_lead::mutable_uuidcompanyid() {
  set_has_uuidcompanyid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.uuidcompanyid)
  return uuidcompanyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_uuidcompanyid() {
  clear_has_uuidcompanyid();
  return uuidcompanyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_uuidcompanyid(::std::string* uuidcompanyid) {
  if (uuidcompanyid != NULL) {
    set_has_uuidcompanyid();
  } else {
    clear_has_uuidcompanyid();
  }
  uuidcompanyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidcompanyid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.uuidcompanyid)
}

// optional string leadname = 10;
inline bool db_crm_lead::has_leadname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void db_crm_lead::set_has_leadname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void db_crm_lead::clear_has_leadname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void db_crm_lead::clear_leadname() {
  leadname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leadname();
}
inline const ::std::string& db_crm_lead::leadname() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.leadname)
  return leadname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_leadname(const ::std::string& value) {
  set_has_leadname();
  leadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.leadname)
}
inline void db_crm_lead::set_leadname(const char* value) {
  set_has_leadname();
  leadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.leadname)
}
inline void db_crm_lead::set_leadname(const char* value, size_t size) {
  set_has_leadname();
  leadname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.leadname)
}
inline ::std::string* db_crm_lead::mutable_leadname() {
  set_has_leadname();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.leadname)
  return leadname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_leadname() {
  clear_has_leadname();
  return leadname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_leadname(::std::string* leadname) {
  if (leadname != NULL) {
    set_has_leadname();
  } else {
    clear_has_leadname();
  }
  leadname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leadname);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.leadname)
}

// optional string createdate = 11;
inline bool db_crm_lead::has_createdate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void db_crm_lead::set_has_createdate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void db_crm_lead::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void db_crm_lead::clear_createdate() {
  createdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createdate();
}
inline const ::std::string& db_crm_lead::createdate() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.createdate)
  return createdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_createdate(const ::std::string& value) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.createdate)
}
inline void db_crm_lead::set_createdate(const char* value) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.createdate)
}
inline void db_crm_lead::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  createdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.createdate)
}
inline ::std::string* db_crm_lead::mutable_createdate() {
  set_has_createdate();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.createdate)
  return createdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_createdate() {
  clear_has_createdate();
  return createdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_createdate(::std::string* createdate) {
  if (createdate != NULL) {
    set_has_createdate();
  } else {
    clear_has_createdate();
  }
  createdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdate);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.createdate)
}

// optional string partnername = 12;
inline bool db_crm_lead::has_partnername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void db_crm_lead::set_has_partnername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void db_crm_lead::clear_has_partnername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void db_crm_lead::clear_partnername() {
  partnername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partnername();
}
inline const ::std::string& db_crm_lead::partnername() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.partnername)
  return partnername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_partnername(const ::std::string& value) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.partnername)
}
inline void db_crm_lead::set_partnername(const char* value) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.partnername)
}
inline void db_crm_lead::set_partnername(const char* value, size_t size) {
  set_has_partnername();
  partnername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.partnername)
}
inline ::std::string* db_crm_lead::mutable_partnername() {
  set_has_partnername();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.partnername)
  return partnername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_partnername() {
  clear_has_partnername();
  return partnername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_partnername(::std::string* partnername) {
  if (partnername != NULL) {
    set_has_partnername();
  } else {
    clear_has_partnername();
  }
  partnername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partnername);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.partnername)
}

// optional string street = 17;
inline bool db_crm_lead::has_street() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void db_crm_lead::set_has_street() {
  _has_bits_[0] |= 0x00000100u;
}
inline void db_crm_lead::clear_has_street() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void db_crm_lead::clear_street() {
  street_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_street();
}
inline const ::std::string& db_crm_lead::street() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_lead.street)
  return street_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_street(const ::std::string& value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_lead.street)
}
inline void db_crm_lead::set_street(const char* value) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_lead.street)
}
inline void db_crm_lead::set_street(const char* value, size_t size) {
  set_has_street();
  street_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_lead.street)
}
inline ::std::string* db_crm_lead::mutable_street() {
  set_has_street();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_lead.street)
  return street_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_lead::release_street() {
  clear_has_street();
  return street_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_lead::set_allocated_street(::std::string* street) {
  if (street != NULL) {
    set_has_street();
  } else {
    clear_has_street();
  }
  street_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), street);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_lead.street)
}

// -------------------------------------------------------------------

// db_crm_phonecall

// required string uuidphonecallid = 1;
inline bool db_crm_phonecall::has_uuidphonecallid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void db_crm_phonecall::set_has_uuidphonecallid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void db_crm_phonecall::clear_has_uuidphonecallid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void db_crm_phonecall::clear_uuidphonecallid() {
  uuidphonecallid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidphonecallid();
}
inline const ::std::string& db_crm_phonecall::uuidphonecallid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_phonecall.uuidphonecallid)
  return uuidphonecallid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_uuidphonecallid(const ::std::string& value) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_phonecall.uuidphonecallid)
}
inline void db_crm_phonecall::set_uuidphonecallid(const char* value) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_phonecall.uuidphonecallid)
}
inline void db_crm_phonecall::set_uuidphonecallid(const char* value, size_t size) {
  set_has_uuidphonecallid();
  uuidphonecallid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_phonecall.uuidphonecallid)
}
inline ::std::string* db_crm_phonecall::mutable_uuidphonecallid() {
  set_has_uuidphonecallid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_phonecall.uuidphonecallid)
  return uuidphonecallid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_phonecall::release_uuidphonecallid() {
  clear_has_uuidphonecallid();
  return uuidphonecallid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_allocated_uuidphonecallid(::std::string* uuidphonecallid) {
  if (uuidphonecallid != NULL) {
    set_has_uuidphonecallid();
  } else {
    clear_has_uuidphonecallid();
  }
  uuidphonecallid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidphonecallid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_phonecall.uuidphonecallid)
}

// required string type = 2 [default = "crm_phonecall"];
inline bool db_crm_phonecall::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void db_crm_phonecall::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void db_crm_phonecall::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void db_crm_phonecall::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& db_crm_phonecall::type() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_phonecall.type)
  return type_.GetNoArena(_default_type_);
}
inline void db_crm_phonecall::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_phonecall.type)
}
inline void db_crm_phonecall::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_phonecall.type)
}
inline void db_crm_phonecall::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_phonecall.type)
}
inline ::std::string* db_crm_phonecall::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_phonecall.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* db_crm_phonecall::release_type() {
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void db_crm_phonecall::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_phonecall.type)
}

// repeated string channel = 3;
inline int db_crm_phonecall::channel_size() const {
  return channel_.size();
}
inline void db_crm_phonecall::clear_channel() {
  channel_.Clear();
}
inline const ::std::string& db_crm_phonecall::channel(int index) const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_phonecall.channel)
  return channel_.Get(index);
}
inline ::std::string* db_crm_phonecall::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_phonecall.channel)
  return channel_.Mutable(index);
}
inline void db_crm_phonecall::set_channel(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_phonecall.channel)
  channel_.Mutable(index)->assign(value);
}
inline void db_crm_phonecall::set_channel(int index, const char* value) {
  channel_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_phonecall.channel)
}
inline void db_crm_phonecall::set_channel(int index, const char* value, size_t size) {
  channel_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_phonecall.channel)
}
inline ::std::string* db_crm_phonecall::add_channel() {
  return channel_.Add();
}
inline void db_crm_phonecall::add_channel(const ::std::string& value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xkcrm.db_crm_phonecall.channel)
}
inline void db_crm_phonecall::add_channel(const char* value) {
  channel_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xkcrm.db_crm_phonecall.channel)
}
inline void db_crm_phonecall::add_channel(const char* value, size_t size) {
  channel_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xkcrm.db_crm_phonecall.channel)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
db_crm_phonecall::channel() const {
  // @@protoc_insertion_point(field_list:xkcrm.db_crm_phonecall.channel)
  return channel_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
db_crm_phonecall::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:xkcrm.db_crm_phonecall.channel)
  return &channel_;
}

// required string uuiduserid = 4;
inline bool db_crm_phonecall::has_uuiduserid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void db_crm_phonecall::set_has_uuiduserid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void db_crm_phonecall::clear_has_uuiduserid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void db_crm_phonecall::clear_uuiduserid() {
  uuiduserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuiduserid();
}
inline const ::std::string& db_crm_phonecall::uuiduserid() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_phonecall.uuiduserid)
  return uuiduserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_uuiduserid(const ::std::string& value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_phonecall.uuiduserid)
}
inline void db_crm_phonecall::set_uuiduserid(const char* value) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_phonecall.uuiduserid)
}
inline void db_crm_phonecall::set_uuiduserid(const char* value, size_t size) {
  set_has_uuiduserid();
  uuiduserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_phonecall.uuiduserid)
}
inline ::std::string* db_crm_phonecall::mutable_uuiduserid() {
  set_has_uuiduserid();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_phonecall.uuiduserid)
  return uuiduserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_phonecall::release_uuiduserid() {
  clear_has_uuiduserid();
  return uuiduserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_allocated_uuiduserid(::std::string* uuiduserid) {
  if (uuiduserid != NULL) {
    set_has_uuiduserid();
  } else {
    clear_has_uuiduserid();
  }
  uuiduserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuiduserid);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_phonecall.uuiduserid)
}

// optional string uuidpartner = 5;
inline bool db_crm_phonecall::has_uuidpartner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void db_crm_phonecall::set_has_uuidpartner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void db_crm_phonecall::clear_has_uuidpartner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void db_crm_phonecall::clear_uuidpartner() {
  uuidpartner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuidpartner();
}
inline const ::std::string& db_crm_phonecall::uuidpartner() const {
  // @@protoc_insertion_point(field_get:xkcrm.db_crm_phonecall.uuidpartner)
  return uuidpartner_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_uuidpartner(const ::std::string& value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xkcrm.db_crm_phonecall.uuidpartner)
}
inline void db_crm_phonecall::set_uuidpartner(const char* value) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xkcrm.db_crm_phonecall.uuidpartner)
}
inline void db_crm_phonecall::set_uuidpartner(const char* value, size_t size) {
  set_has_uuidpartner();
  uuidpartner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xkcrm.db_crm_phonecall.uuidpartner)
}
inline ::std::string* db_crm_phonecall::mutable_uuidpartner() {
  set_has_uuidpartner();
  // @@protoc_insertion_point(field_mutable:xkcrm.db_crm_phonecall.uuidpartner)
  return uuidpartner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* db_crm_phonecall::release_uuidpartner() {
  clear_has_uuidpartner();
  return uuidpartner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void db_crm_phonecall::set_allocated_uuidpartner(::std::string* uuidpartner) {
  if (uuidpartner != NULL) {
    set_has_uuidpartner();
  } else {
    clear_has_uuidpartner();
  }
  uuidpartner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuidpartner);
  // @@protoc_insertion_point(field_set_allocated:xkcrm.db_crm_phonecall.uuidpartner)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xkcrm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nosqldb_2eproto__INCLUDED
