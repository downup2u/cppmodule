// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef PROTOBUF_session_2eproto__INCLUDED
#define PROTOBUF_session_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace session {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_session_2eproto();
void protobuf_AssignDesc_session_2eproto();
void protobuf_ShutdownFile_session_2eproto();

class PkgSessionUser;
class PkgRoleUser;
class PkgUser;

enum EnAuthType {
  EA_REGISTERAUTH = 0,
  EA_FINDPASSWORD = 1
};
bool EnAuthType_IsValid(int value);
const EnAuthType EnAuthType_MIN = EA_REGISTERAUTH;
const EnAuthType EnAuthType_MAX = EA_FINDPASSWORD;
const int EnAuthType_ARRAYSIZE = EnAuthType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnAuthType_descriptor();
inline const ::std::string& EnAuthType_Name(EnAuthType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnAuthType_descriptor(), value);
}
inline bool EnAuthType_Parse(
    const ::std::string& name, EnAuthType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnAuthType>(
    EnAuthType_descriptor(), name, value);
}
// ===================================================================

class PkgSessionUser : public ::google::protobuf::Message {
 public:
  PkgSessionUser();
  virtual ~PkgSessionUser();

  PkgSessionUser(const PkgSessionUser& from);

  inline PkgSessionUser& operator=(const PkgSessionUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgSessionUser& default_instance();

  void Swap(PkgSessionUser* other);

  // implements Message ----------------------------------------------

  inline PkgSessionUser* New() const { return New(NULL); }

  PkgSessionUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgSessionUser& from);
  void MergeFrom(const PkgSessionUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgSessionUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // optional string appversion = 3;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppversionFieldNumber = 3;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  inline void set_allocated_appversion(::std::string* appversion);

  // optional string applanguage = 4;
  inline bool has_applanguage() const;
  inline void clear_applanguage();
  static const int kApplanguageFieldNumber = 4;
  inline const ::std::string& applanguage() const;
  inline void set_applanguage(const ::std::string& value);
  inline void set_applanguage(const char* value);
  inline void set_applanguage(const char* value, size_t size);
  inline ::std::string* mutable_applanguage();
  inline ::std::string* release_applanguage();
  inline void set_allocated_applanguage(::std::string* applanguage);

  // optional string clientsn = 5;
  inline bool has_clientsn() const;
  inline void clear_clientsn();
  static const int kClientsnFieldNumber = 5;
  inline const ::std::string& clientsn() const;
  inline void set_clientsn(const ::std::string& value);
  inline void set_clientsn(const char* value);
  inline void set_clientsn(const char* value, size_t size);
  inline ::std::string* mutable_clientsn();
  inline ::std::string* release_clientsn();
  inline void set_allocated_clientsn(::std::string* clientsn);

  // optional string serversn = 6;
  inline bool has_serversn() const;
  inline void clear_serversn();
  static const int kServersnFieldNumber = 6;
  inline const ::std::string& serversn() const;
  inline void set_serversn(const ::std::string& value);
  inline void set_serversn(const char* value);
  inline void set_serversn(const char* value, size_t size);
  inline ::std::string* mutable_serversn();
  inline ::std::string* release_serversn();
  inline void set_allocated_serversn(::std::string* serversn);

  // optional string hashedserversn = 7;
  inline bool has_hashedserversn() const;
  inline void clear_hashedserversn();
  static const int kHashedserversnFieldNumber = 7;
  inline const ::std::string& hashedserversn() const;
  inline void set_hashedserversn(const ::std::string& value);
  inline void set_hashedserversn(const char* value);
  inline void set_hashedserversn(const char* value, size_t size);
  inline ::std::string* mutable_hashedserversn();
  inline ::std::string* release_hashedserversn();
  inline void set_allocated_hashedserversn(::std::string* hashedserversn);

  // optional string ostype = 10;
  inline bool has_ostype() const;
  inline void clear_ostype();
  static const int kOstypeFieldNumber = 10;
  inline const ::std::string& ostype() const;
  inline void set_ostype(const ::std::string& value);
  inline void set_ostype(const char* value);
  inline void set_ostype(const char* value, size_t size);
  inline ::std::string* mutable_ostype();
  inline ::std::string* release_ostype();
  inline void set_allocated_ostype(::std::string* ostype);

  // optional string osversion = 11;
  inline bool has_osversion() const;
  inline void clear_osversion();
  static const int kOsversionFieldNumber = 11;
  inline const ::std::string& osversion() const;
  inline void set_osversion(const ::std::string& value);
  inline void set_osversion(const char* value);
  inline void set_osversion(const char* value, size_t size);
  inline ::std::string* mutable_osversion();
  inline ::std::string* release_osversion();
  inline void set_allocated_osversion(::std::string* osversion);

  // optional string osrr = 12;
  inline bool has_osrr() const;
  inline void clear_osrr();
  static const int kOsrrFieldNumber = 12;
  inline const ::std::string& osrr() const;
  inline void set_osrr(const ::std::string& value);
  inline void set_osrr(const char* value);
  inline void set_osrr(const char* value, size_t size);
  inline ::std::string* mutable_osrr();
  inline ::std::string* release_osrr();
  inline void set_allocated_osrr(::std::string* osrr);

  // optional string encryptkey = 100;
  inline bool has_encryptkey() const;
  inline void clear_encryptkey();
  static const int kEncryptkeyFieldNumber = 100;
  inline const ::std::string& encryptkey() const;
  inline void set_encryptkey(const ::std::string& value);
  inline void set_encryptkey(const char* value);
  inline void set_encryptkey(const char* value, size_t size);
  inline ::std::string* mutable_encryptkey();
  inline ::std::string* release_encryptkey();
  inline void set_allocated_encryptkey(::std::string* encryptkey);

  // optional .session.PkgUser user = 200;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 200;
  inline const ::session::PkgUser& user() const;
  inline ::session::PkgUser* mutable_user();
  inline ::session::PkgUser* release_user();
  inline void set_allocated_user(::session::PkgUser* user);

  // optional string loginsn = 1001;
  inline bool has_loginsn() const;
  inline void clear_loginsn();
  static const int kLoginsnFieldNumber = 1001;
  inline const ::std::string& loginsn() const;
  inline void set_loginsn(const ::std::string& value);
  inline void set_loginsn(const char* value);
  inline void set_loginsn(const char* value, size_t size);
  inline ::std::string* mutable_loginsn();
  inline ::std::string* release_loginsn();
  inline void set_allocated_loginsn(::std::string* loginsn);

  // @@protoc_insertion_point(class_scope:session.PkgSessionUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appversion();
  inline void clear_has_appversion();
  inline void set_has_applanguage();
  inline void clear_has_applanguage();
  inline void set_has_clientsn();
  inline void clear_has_clientsn();
  inline void set_has_serversn();
  inline void clear_has_serversn();
  inline void set_has_hashedserversn();
  inline void clear_has_hashedserversn();
  inline void set_has_ostype();
  inline void clear_has_ostype();
  inline void set_has_osversion();
  inline void clear_has_osversion();
  inline void set_has_osrr();
  inline void clear_has_osrr();
  inline void set_has_encryptkey();
  inline void clear_has_encryptkey();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_loginsn();
  inline void clear_has_loginsn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  ::google::protobuf::internal::ArenaStringPtr applanguage_;
  ::google::protobuf::internal::ArenaStringPtr clientsn_;
  ::google::protobuf::internal::ArenaStringPtr serversn_;
  ::google::protobuf::internal::ArenaStringPtr hashedserversn_;
  ::google::protobuf::internal::ArenaStringPtr ostype_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr osrr_;
  ::google::protobuf::internal::ArenaStringPtr encryptkey_;
  ::session::PkgUser* user_;
  ::google::protobuf::internal::ArenaStringPtr loginsn_;
  ::google::protobuf::int32 userid_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static PkgSessionUser* default_instance_;
};
// -------------------------------------------------------------------

class PkgRoleUser : public ::google::protobuf::Message {
 public:
  PkgRoleUser();
  virtual ~PkgRoleUser();

  PkgRoleUser(const PkgRoleUser& from);

  inline PkgRoleUser& operator=(const PkgRoleUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgRoleUser& default_instance();

  void Swap(PkgRoleUser* other);

  // implements Message ----------------------------------------------

  inline PkgRoleUser* New() const { return New(NULL); }

  PkgRoleUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgRoleUser& from);
  void MergeFrom(const PkgRoleUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgRoleUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string rolename = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional string roledesc = 3;
  inline bool has_roledesc() const;
  inline void clear_roledesc();
  static const int kRoledescFieldNumber = 3;
  inline const ::std::string& roledesc() const;
  inline void set_roledesc(const ::std::string& value);
  inline void set_roledesc(const char* value);
  inline void set_roledesc(const char* value, size_t size);
  inline ::std::string* mutable_roledesc();
  inline ::std::string* release_roledesc();
  inline void set_allocated_roledesc(::std::string* roledesc);

  // optional int32 permission = 4;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 4;
  inline ::google::protobuf::int32 permission() const;
  inline void set_permission(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:session.PkgRoleUser)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_roledesc();
  inline void clear_has_roledesc();
  inline void set_has_permission();
  inline void clear_has_permission();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rolename_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::internal::ArenaStringPtr roledesc_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static PkgRoleUser* default_instance_;
};
// -------------------------------------------------------------------

class PkgUser : public ::google::protobuf::Message {
 public:
  PkgUser();
  virtual ~PkgUser();

  PkgUser(const PkgUser& from);

  inline PkgUser& operator=(const PkgUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkgUser& default_instance();

  void Swap(PkgUser* other);

  // implements Message ----------------------------------------------

  inline PkgUser* New() const { return New(NULL); }

  PkgUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkgUser& from);
  void MergeFrom(const PkgUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PkgUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string username = 10;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 10;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string realname = 11;
  inline bool has_realname() const;
  inline void clear_realname();
  static const int kRealnameFieldNumber = 11;
  inline const ::std::string& realname() const;
  inline void set_realname(const ::std::string& value);
  inline void set_realname(const char* value);
  inline void set_realname(const char* value, size_t size);
  inline ::std::string* mutable_realname();
  inline ::std::string* release_realname();
  inline void set_allocated_realname(::std::string* realname);

  // optional string phonenumber = 12;
  inline bool has_phonenumber() const;
  inline void clear_phonenumber();
  static const int kPhonenumberFieldNumber = 12;
  inline const ::std::string& phonenumber() const;
  inline void set_phonenumber(const ::std::string& value);
  inline void set_phonenumber(const char* value);
  inline void set_phonenumber(const char* value, size_t size);
  inline ::std::string* mutable_phonenumber();
  inline ::std::string* release_phonenumber();
  inline void set_allocated_phonenumber(::std::string* phonenumber);

  // optional string emailaddress = 13;
  inline bool has_emailaddress() const;
  inline void clear_emailaddress();
  static const int kEmailaddressFieldNumber = 13;
  inline const ::std::string& emailaddress() const;
  inline void set_emailaddress(const ::std::string& value);
  inline void set_emailaddress(const char* value);
  inline void set_emailaddress(const char* value, size_t size);
  inline ::std::string* mutable_emailaddress();
  inline ::std::string* release_emailaddress();
  inline void set_allocated_emailaddress(::std::string* emailaddress);

  // optional int32 permission = 15;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 15;
  inline ::google::protobuf::int32 permission() const;
  inline void set_permission(::google::protobuf::int32 value);

  // optional int32 companyid = 16 [default = 0];
  inline bool has_companyid() const;
  inline void clear_companyid();
  static const int kCompanyidFieldNumber = 16;
  inline ::google::protobuf::int32 companyid() const;
  inline void set_companyid(::google::protobuf::int32 value);

  // optional string companyname = 17;
  inline bool has_companyname() const;
  inline void clear_companyname();
  static const int kCompanynameFieldNumber = 17;
  inline const ::std::string& companyname() const;
  inline void set_companyname(const ::std::string& value);
  inline void set_companyname(const char* value);
  inline void set_companyname(const char* value, size_t size);
  inline ::std::string* mutable_companyname();
  inline ::std::string* release_companyname();
  inline void set_allocated_companyname(::std::string* companyname);

  // optional string createtime = 19;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 19;
  inline const ::std::string& createtime() const;
  inline void set_createtime(const ::std::string& value);
  inline void set_createtime(const char* value);
  inline void set_createtime(const char* value, size_t size);
  inline ::std::string* mutable_createtime();
  inline ::std::string* release_createtime();
  inline void set_allocated_createtime(::std::string* createtime);

  // optional int32 permissionroleid = 20;
  inline bool has_permissionroleid() const;
  inline void clear_permissionroleid();
  static const int kPermissionroleidFieldNumber = 20;
  inline ::google::protobuf::int32 permissionroleid() const;
  inline void set_permissionroleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:session.PkgUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_realname();
  inline void clear_has_realname();
  inline void set_has_phonenumber();
  inline void clear_has_phonenumber();
  inline void set_has_emailaddress();
  inline void clear_has_emailaddress();
  inline void set_has_permission();
  inline void clear_has_permission();
  inline void set_has_companyid();
  inline void clear_has_companyid();
  inline void set_has_companyname();
  inline void clear_has_companyname();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_permissionroleid();
  inline void clear_has_permissionroleid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 permission_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::internal::ArenaStringPtr emailaddress_;
  ::google::protobuf::internal::ArenaStringPtr companyname_;
  ::google::protobuf::int32 companyid_;
  ::google::protobuf::int32 permissionroleid_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static PkgUser* default_instance_;
};
// ===================================================================


// ===================================================================

// PkgSessionUser

// optional int32 userid = 1;
inline bool PkgSessionUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgSessionUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgSessionUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgSessionUser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PkgSessionUser::userid() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.userid)
  return userid_;
}
inline void PkgSessionUser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.userid)
}

// optional string apptype = 2;
inline bool PkgSessionUser::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgSessionUser::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgSessionUser::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgSessionUser::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apptype();
}
inline const ::std::string& PkgSessionUser::apptype() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.apptype)
  return apptype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_apptype(const ::std::string& value) {
  set_has_apptype();
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.apptype)
}
inline void PkgSessionUser::set_apptype(const char* value) {
  set_has_apptype();
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.apptype)
}
inline void PkgSessionUser::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.apptype)
}
inline ::std::string* PkgSessionUser::mutable_apptype() {
  set_has_apptype();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_apptype() {
  clear_has_apptype();
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    set_has_apptype();
  } else {
    clear_has_apptype();
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.apptype)
}

// optional string appversion = 3;
inline bool PkgSessionUser::has_appversion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgSessionUser::set_has_appversion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgSessionUser::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgSessionUser::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appversion();
}
inline const ::std::string& PkgSessionUser::appversion() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.appversion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_appversion(const ::std::string& value) {
  set_has_appversion();
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.appversion)
}
inline void PkgSessionUser::set_appversion(const char* value) {
  set_has_appversion();
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.appversion)
}
inline void PkgSessionUser::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.appversion)
}
inline ::std::string* PkgSessionUser::mutable_appversion() {
  set_has_appversion();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.appversion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_appversion() {
  clear_has_appversion();
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    set_has_appversion();
  } else {
    clear_has_appversion();
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.appversion)
}

// optional string applanguage = 4;
inline bool PkgSessionUser::has_applanguage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgSessionUser::set_has_applanguage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgSessionUser::clear_has_applanguage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgSessionUser::clear_applanguage() {
  applanguage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applanguage();
}
inline const ::std::string& PkgSessionUser::applanguage() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.applanguage)
  return applanguage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_applanguage(const ::std::string& value) {
  set_has_applanguage();
  applanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.applanguage)
}
inline void PkgSessionUser::set_applanguage(const char* value) {
  set_has_applanguage();
  applanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.applanguage)
}
inline void PkgSessionUser::set_applanguage(const char* value, size_t size) {
  set_has_applanguage();
  applanguage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.applanguage)
}
inline ::std::string* PkgSessionUser::mutable_applanguage() {
  set_has_applanguage();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.applanguage)
  return applanguage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_applanguage() {
  clear_has_applanguage();
  return applanguage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_applanguage(::std::string* applanguage) {
  if (applanguage != NULL) {
    set_has_applanguage();
  } else {
    clear_has_applanguage();
  }
  applanguage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applanguage);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.applanguage)
}

// optional string clientsn = 5;
inline bool PkgSessionUser::has_clientsn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgSessionUser::set_has_clientsn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgSessionUser::clear_has_clientsn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgSessionUser::clear_clientsn() {
  clientsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientsn();
}
inline const ::std::string& PkgSessionUser::clientsn() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.clientsn)
  return clientsn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_clientsn(const ::std::string& value) {
  set_has_clientsn();
  clientsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.clientsn)
}
inline void PkgSessionUser::set_clientsn(const char* value) {
  set_has_clientsn();
  clientsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.clientsn)
}
inline void PkgSessionUser::set_clientsn(const char* value, size_t size) {
  set_has_clientsn();
  clientsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.clientsn)
}
inline ::std::string* PkgSessionUser::mutable_clientsn() {
  set_has_clientsn();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.clientsn)
  return clientsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_clientsn() {
  clear_has_clientsn();
  return clientsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_clientsn(::std::string* clientsn) {
  if (clientsn != NULL) {
    set_has_clientsn();
  } else {
    clear_has_clientsn();
  }
  clientsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientsn);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.clientsn)
}

// optional string serversn = 6;
inline bool PkgSessionUser::has_serversn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PkgSessionUser::set_has_serversn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PkgSessionUser::clear_has_serversn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PkgSessionUser::clear_serversn() {
  serversn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serversn();
}
inline const ::std::string& PkgSessionUser::serversn() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.serversn)
  return serversn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_serversn(const ::std::string& value) {
  set_has_serversn();
  serversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.serversn)
}
inline void PkgSessionUser::set_serversn(const char* value) {
  set_has_serversn();
  serversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.serversn)
}
inline void PkgSessionUser::set_serversn(const char* value, size_t size) {
  set_has_serversn();
  serversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.serversn)
}
inline ::std::string* PkgSessionUser::mutable_serversn() {
  set_has_serversn();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.serversn)
  return serversn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_serversn() {
  clear_has_serversn();
  return serversn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_serversn(::std::string* serversn) {
  if (serversn != NULL) {
    set_has_serversn();
  } else {
    clear_has_serversn();
  }
  serversn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serversn);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.serversn)
}

// optional string hashedserversn = 7;
inline bool PkgSessionUser::has_hashedserversn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PkgSessionUser::set_has_hashedserversn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PkgSessionUser::clear_has_hashedserversn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PkgSessionUser::clear_hashedserversn() {
  hashedserversn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashedserversn();
}
inline const ::std::string& PkgSessionUser::hashedserversn() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.hashedserversn)
  return hashedserversn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_hashedserversn(const ::std::string& value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.hashedserversn)
}
inline void PkgSessionUser::set_hashedserversn(const char* value) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.hashedserversn)
}
inline void PkgSessionUser::set_hashedserversn(const char* value, size_t size) {
  set_has_hashedserversn();
  hashedserversn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.hashedserversn)
}
inline ::std::string* PkgSessionUser::mutable_hashedserversn() {
  set_has_hashedserversn();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.hashedserversn)
  return hashedserversn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_hashedserversn() {
  clear_has_hashedserversn();
  return hashedserversn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_hashedserversn(::std::string* hashedserversn) {
  if (hashedserversn != NULL) {
    set_has_hashedserversn();
  } else {
    clear_has_hashedserversn();
  }
  hashedserversn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashedserversn);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.hashedserversn)
}

// optional string ostype = 10;
inline bool PkgSessionUser::has_ostype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PkgSessionUser::set_has_ostype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PkgSessionUser::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PkgSessionUser::clear_ostype() {
  ostype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ostype();
}
inline const ::std::string& PkgSessionUser::ostype() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.ostype)
  return ostype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_ostype(const ::std::string& value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.ostype)
}
inline void PkgSessionUser::set_ostype(const char* value) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.ostype)
}
inline void PkgSessionUser::set_ostype(const char* value, size_t size) {
  set_has_ostype();
  ostype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.ostype)
}
inline ::std::string* PkgSessionUser::mutable_ostype() {
  set_has_ostype();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.ostype)
  return ostype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_ostype() {
  clear_has_ostype();
  return ostype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_ostype(::std::string* ostype) {
  if (ostype != NULL) {
    set_has_ostype();
  } else {
    clear_has_ostype();
  }
  ostype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ostype);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.ostype)
}

// optional string osversion = 11;
inline bool PkgSessionUser::has_osversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PkgSessionUser::set_has_osversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PkgSessionUser::clear_has_osversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PkgSessionUser::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_osversion();
}
inline const ::std::string& PkgSessionUser::osversion() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.osversion)
  return osversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_osversion(const ::std::string& value) {
  set_has_osversion();
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.osversion)
}
inline void PkgSessionUser::set_osversion(const char* value) {
  set_has_osversion();
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.osversion)
}
inline void PkgSessionUser::set_osversion(const char* value, size_t size) {
  set_has_osversion();
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.osversion)
}
inline ::std::string* PkgSessionUser::mutable_osversion() {
  set_has_osversion();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.osversion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_osversion() {
  clear_has_osversion();
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    set_has_osversion();
  } else {
    clear_has_osversion();
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.osversion)
}

// optional string osrr = 12;
inline bool PkgSessionUser::has_osrr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PkgSessionUser::set_has_osrr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PkgSessionUser::clear_has_osrr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PkgSessionUser::clear_osrr() {
  osrr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_osrr();
}
inline const ::std::string& PkgSessionUser::osrr() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.osrr)
  return osrr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_osrr(const ::std::string& value) {
  set_has_osrr();
  osrr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.osrr)
}
inline void PkgSessionUser::set_osrr(const char* value) {
  set_has_osrr();
  osrr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.osrr)
}
inline void PkgSessionUser::set_osrr(const char* value, size_t size) {
  set_has_osrr();
  osrr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.osrr)
}
inline ::std::string* PkgSessionUser::mutable_osrr() {
  set_has_osrr();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.osrr)
  return osrr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_osrr() {
  clear_has_osrr();
  return osrr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_osrr(::std::string* osrr) {
  if (osrr != NULL) {
    set_has_osrr();
  } else {
    clear_has_osrr();
  }
  osrr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osrr);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.osrr)
}

// optional string encryptkey = 100;
inline bool PkgSessionUser::has_encryptkey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PkgSessionUser::set_has_encryptkey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PkgSessionUser::clear_has_encryptkey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PkgSessionUser::clear_encryptkey() {
  encryptkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encryptkey();
}
inline const ::std::string& PkgSessionUser::encryptkey() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.encryptkey)
  return encryptkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_encryptkey(const ::std::string& value) {
  set_has_encryptkey();
  encryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.encryptkey)
}
inline void PkgSessionUser::set_encryptkey(const char* value) {
  set_has_encryptkey();
  encryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.encryptkey)
}
inline void PkgSessionUser::set_encryptkey(const char* value, size_t size) {
  set_has_encryptkey();
  encryptkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.encryptkey)
}
inline ::std::string* PkgSessionUser::mutable_encryptkey() {
  set_has_encryptkey();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.encryptkey)
  return encryptkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_encryptkey() {
  clear_has_encryptkey();
  return encryptkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_encryptkey(::std::string* encryptkey) {
  if (encryptkey != NULL) {
    set_has_encryptkey();
  } else {
    clear_has_encryptkey();
  }
  encryptkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encryptkey);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.encryptkey)
}

// optional .session.PkgUser user = 200;
inline bool PkgSessionUser::has_user() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PkgSessionUser::set_has_user() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PkgSessionUser::clear_has_user() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PkgSessionUser::clear_user() {
  if (user_ != NULL) user_->::session::PkgUser::Clear();
  clear_has_user();
}
inline const ::session::PkgUser& PkgSessionUser::user() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::session::PkgUser* PkgSessionUser::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::session::PkgUser;
  }
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.user)
  return user_;
}
inline ::session::PkgUser* PkgSessionUser::release_user() {
  clear_has_user();
  ::session::PkgUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void PkgSessionUser::set_allocated_user(::session::PkgUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.user)
}

// optional string loginsn = 1001;
inline bool PkgSessionUser::has_loginsn() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PkgSessionUser::set_has_loginsn() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PkgSessionUser::clear_has_loginsn() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PkgSessionUser::clear_loginsn() {
  loginsn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loginsn();
}
inline const ::std::string& PkgSessionUser::loginsn() const {
  // @@protoc_insertion_point(field_get:session.PkgSessionUser.loginsn)
  return loginsn_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_loginsn(const ::std::string& value) {
  set_has_loginsn();
  loginsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgSessionUser.loginsn)
}
inline void PkgSessionUser::set_loginsn(const char* value) {
  set_has_loginsn();
  loginsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgSessionUser.loginsn)
}
inline void PkgSessionUser::set_loginsn(const char* value, size_t size) {
  set_has_loginsn();
  loginsn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgSessionUser.loginsn)
}
inline ::std::string* PkgSessionUser::mutable_loginsn() {
  set_has_loginsn();
  // @@protoc_insertion_point(field_mutable:session.PkgSessionUser.loginsn)
  return loginsn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgSessionUser::release_loginsn() {
  clear_has_loginsn();
  return loginsn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgSessionUser::set_allocated_loginsn(::std::string* loginsn) {
  if (loginsn != NULL) {
    set_has_loginsn();
  } else {
    clear_has_loginsn();
  }
  loginsn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginsn);
  // @@protoc_insertion_point(field_set_allocated:session.PkgSessionUser.loginsn)
}

// -------------------------------------------------------------------

// PkgRoleUser

// optional int32 id = 1;
inline bool PkgRoleUser::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgRoleUser::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgRoleUser::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgRoleUser::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PkgRoleUser::id() const {
  // @@protoc_insertion_point(field_get:session.PkgRoleUser.id)
  return id_;
}
inline void PkgRoleUser::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:session.PkgRoleUser.id)
}

// optional string rolename = 2;
inline bool PkgRoleUser::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgRoleUser::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgRoleUser::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgRoleUser::clear_rolename() {
  rolename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rolename();
}
inline const ::std::string& PkgRoleUser::rolename() const {
  // @@protoc_insertion_point(field_get:session.PkgRoleUser.rolename)
  return rolename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgRoleUser::set_rolename(const ::std::string& value) {
  set_has_rolename();
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgRoleUser.rolename)
}
inline void PkgRoleUser::set_rolename(const char* value) {
  set_has_rolename();
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgRoleUser.rolename)
}
inline void PkgRoleUser::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  rolename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgRoleUser.rolename)
}
inline ::std::string* PkgRoleUser::mutable_rolename() {
  set_has_rolename();
  // @@protoc_insertion_point(field_mutable:session.PkgRoleUser.rolename)
  return rolename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgRoleUser::release_rolename() {
  clear_has_rolename();
  return rolename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgRoleUser::set_allocated_rolename(::std::string* rolename) {
  if (rolename != NULL) {
    set_has_rolename();
  } else {
    clear_has_rolename();
  }
  rolename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rolename);
  // @@protoc_insertion_point(field_set_allocated:session.PkgRoleUser.rolename)
}

// optional string roledesc = 3;
inline bool PkgRoleUser::has_roledesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgRoleUser::set_has_roledesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgRoleUser::clear_has_roledesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgRoleUser::clear_roledesc() {
  roledesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roledesc();
}
inline const ::std::string& PkgRoleUser::roledesc() const {
  // @@protoc_insertion_point(field_get:session.PkgRoleUser.roledesc)
  return roledesc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgRoleUser::set_roledesc(const ::std::string& value) {
  set_has_roledesc();
  roledesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgRoleUser.roledesc)
}
inline void PkgRoleUser::set_roledesc(const char* value) {
  set_has_roledesc();
  roledesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgRoleUser.roledesc)
}
inline void PkgRoleUser::set_roledesc(const char* value, size_t size) {
  set_has_roledesc();
  roledesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgRoleUser.roledesc)
}
inline ::std::string* PkgRoleUser::mutable_roledesc() {
  set_has_roledesc();
  // @@protoc_insertion_point(field_mutable:session.PkgRoleUser.roledesc)
  return roledesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgRoleUser::release_roledesc() {
  clear_has_roledesc();
  return roledesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgRoleUser::set_allocated_roledesc(::std::string* roledesc) {
  if (roledesc != NULL) {
    set_has_roledesc();
  } else {
    clear_has_roledesc();
  }
  roledesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roledesc);
  // @@protoc_insertion_point(field_set_allocated:session.PkgRoleUser.roledesc)
}

// optional int32 permission = 4;
inline bool PkgRoleUser::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgRoleUser::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgRoleUser::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgRoleUser::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 PkgRoleUser::permission() const {
  // @@protoc_insertion_point(field_get:session.PkgRoleUser.permission)
  return permission_;
}
inline void PkgRoleUser::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:session.PkgRoleUser.permission)
}

// -------------------------------------------------------------------

// PkgUser

// optional int32 userid = 3;
inline bool PkgUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkgUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkgUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkgUser::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PkgUser::userid() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.userid)
  return userid_;
}
inline void PkgUser::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:session.PkgUser.userid)
}

// optional string password = 4;
inline bool PkgUser::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkgUser::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkgUser::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkgUser::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& PkgUser::password() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.password)
}
inline void PkgUser::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.password)
}
inline void PkgUser::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.password)
}
inline ::std::string* PkgUser::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.password)
}

// optional string username = 10;
inline bool PkgUser::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkgUser::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkgUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkgUser::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& PkgUser::username() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.username)
}
inline void PkgUser::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.username)
}
inline void PkgUser::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.username)
}
inline ::std::string* PkgUser::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.username)
}

// optional string realname = 11;
inline bool PkgUser::has_realname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PkgUser::set_has_realname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PkgUser::clear_has_realname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PkgUser::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_realname();
}
inline const ::std::string& PkgUser::realname() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.realname)
  return realname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_realname(const ::std::string& value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.realname)
}
inline void PkgUser::set_realname(const char* value) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.realname)
}
inline void PkgUser::set_realname(const char* value, size_t size) {
  set_has_realname();
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.realname)
}
inline ::std::string* PkgUser::mutable_realname() {
  set_has_realname();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.realname)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_realname() {
  clear_has_realname();
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    set_has_realname();
  } else {
    clear_has_realname();
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.realname)
}

// optional string phonenumber = 12;
inline bool PkgUser::has_phonenumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PkgUser::set_has_phonenumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PkgUser::clear_has_phonenumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PkgUser::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phonenumber();
}
inline const ::std::string& PkgUser::phonenumber() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.phonenumber)
  return phonenumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_phonenumber(const ::std::string& value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.phonenumber)
}
inline void PkgUser::set_phonenumber(const char* value) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.phonenumber)
}
inline void PkgUser::set_phonenumber(const char* value, size_t size) {
  set_has_phonenumber();
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.phonenumber)
}
inline ::std::string* PkgUser::mutable_phonenumber() {
  set_has_phonenumber();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.phonenumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_phonenumber() {
  clear_has_phonenumber();
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    set_has_phonenumber();
  } else {
    clear_has_phonenumber();
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.phonenumber)
}

// optional string emailaddress = 13;
inline bool PkgUser::has_emailaddress() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PkgUser::set_has_emailaddress() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PkgUser::clear_has_emailaddress() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PkgUser::clear_emailaddress() {
  emailaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emailaddress();
}
inline const ::std::string& PkgUser::emailaddress() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.emailaddress)
  return emailaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_emailaddress(const ::std::string& value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.emailaddress)
}
inline void PkgUser::set_emailaddress(const char* value) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.emailaddress)
}
inline void PkgUser::set_emailaddress(const char* value, size_t size) {
  set_has_emailaddress();
  emailaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.emailaddress)
}
inline ::std::string* PkgUser::mutable_emailaddress() {
  set_has_emailaddress();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.emailaddress)
  return emailaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_emailaddress() {
  clear_has_emailaddress();
  return emailaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_emailaddress(::std::string* emailaddress) {
  if (emailaddress != NULL) {
    set_has_emailaddress();
  } else {
    clear_has_emailaddress();
  }
  emailaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailaddress);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.emailaddress)
}

// optional int32 permission = 15;
inline bool PkgUser::has_permission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PkgUser::set_has_permission() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PkgUser::clear_has_permission() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PkgUser::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
inline ::google::protobuf::int32 PkgUser::permission() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.permission)
  return permission_;
}
inline void PkgUser::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:session.PkgUser.permission)
}

// optional int32 companyid = 16 [default = 0];
inline bool PkgUser::has_companyid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PkgUser::set_has_companyid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PkgUser::clear_has_companyid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PkgUser::clear_companyid() {
  companyid_ = 0;
  clear_has_companyid();
}
inline ::google::protobuf::int32 PkgUser::companyid() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.companyid)
  return companyid_;
}
inline void PkgUser::set_companyid(::google::protobuf::int32 value) {
  set_has_companyid();
  companyid_ = value;
  // @@protoc_insertion_point(field_set:session.PkgUser.companyid)
}

// optional string companyname = 17;
inline bool PkgUser::has_companyname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PkgUser::set_has_companyname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PkgUser::clear_has_companyname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PkgUser::clear_companyname() {
  companyname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_companyname();
}
inline const ::std::string& PkgUser::companyname() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.companyname)
  return companyname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_companyname(const ::std::string& value) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.companyname)
}
inline void PkgUser::set_companyname(const char* value) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.companyname)
}
inline void PkgUser::set_companyname(const char* value, size_t size) {
  set_has_companyname();
  companyname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.companyname)
}
inline ::std::string* PkgUser::mutable_companyname() {
  set_has_companyname();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.companyname)
  return companyname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_companyname() {
  clear_has_companyname();
  return companyname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_companyname(::std::string* companyname) {
  if (companyname != NULL) {
    set_has_companyname();
  } else {
    clear_has_companyname();
  }
  companyname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), companyname);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.companyname)
}

// optional string createtime = 19;
inline bool PkgUser::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PkgUser::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PkgUser::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PkgUser::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_createtime();
}
inline const ::std::string& PkgUser::createtime() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.createtime)
  return createtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_createtime(const ::std::string& value) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:session.PkgUser.createtime)
}
inline void PkgUser::set_createtime(const char* value) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:session.PkgUser.createtime)
}
inline void PkgUser::set_createtime(const char* value, size_t size) {
  set_has_createtime();
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:session.PkgUser.createtime)
}
inline ::std::string* PkgUser::mutable_createtime() {
  set_has_createtime();
  // @@protoc_insertion_point(field_mutable:session.PkgUser.createtime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PkgUser::release_createtime() {
  clear_has_createtime();
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PkgUser::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    set_has_createtime();
  } else {
    clear_has_createtime();
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:session.PkgUser.createtime)
}

// optional int32 permissionroleid = 20;
inline bool PkgUser::has_permissionroleid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PkgUser::set_has_permissionroleid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PkgUser::clear_has_permissionroleid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PkgUser::clear_permissionroleid() {
  permissionroleid_ = 0;
  clear_has_permissionroleid();
}
inline ::google::protobuf::int32 PkgUser::permissionroleid() const {
  // @@protoc_insertion_point(field_get:session.PkgUser.permissionroleid)
  return permissionroleid_;
}
inline void PkgUser::set_permissionroleid(::google::protobuf::int32 value) {
  set_has_permissionroleid();
  permissionroleid_ = value;
  // @@protoc_insertion_point(field_set:session.PkgUser.permissionroleid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace session

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::session::EnAuthType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::session::EnAuthType>() {
  return ::session::EnAuthType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_session_2eproto__INCLUDED
